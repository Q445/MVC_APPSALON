Lo primero que vamos a hacer al momento de iniciar algún proyecto, es descargar las dependencias de NPM. 

npm install o npm -i

Hay que checar las lineas de codigo siempre y cuando nos den un archivo con un package.json para saber como se va a llamar el que va adepurar el codigo sea npm run nombre que este en el script

Tambien para algunos proyectos necesitaremos utilizar composer.json para ello utilizamos el script que es "composer init"

Luego que el composer nos pregunte nos debe de quedar la configuracion así.

{
  "name": "gustavo/app-salon_mvc",
  "description": "Proyecto PHP 8, MVC, SQL, SASS, Gulp",
  "type": "project",
  "autoload": {
    "psr-4": {
      "MVC\\": "./",
      "Controllers\\": "./controllers",
      "Model\\": "./models"
    }
  },
  "authors": [
    {
      "name": "Gustavo"
    }
  ],
  "require": {}
}
public static function recuperar()
  {
    echo "Desde Recuperar.";
  }

+------------------------------+
|Creando el Routing controlador|
+------------------------------+
Ok ya cuando el archivo de configuracion este generado, nos dirigimos a la carpeta public ya que de alli vamos a generar nosotros la vista del codigo y es donde empieza la clase. 

Nos ubicamos en el archvio de "index.php" 


<?php 

require_once __DIR__ . '/../includes/app.php';

use MVC\Router;

$router = new Router();

$router->get('/', [])


// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ahora vamos a crear un archivo en la carpeta de controllers.

<?php

namespace Controllers;

class LoginController -> Se va a llamar asi. 
{
  public static function login() -> Sera una clase estatica
  {
    echo "Desde Login";
  }
}

Ahora nos devolvemos al "index.php", de la carpeta public. 

<?php

require_once __DIR__ . '/../includes/app.php';

use Controllers\LoginController;
use MVC\Router;

$router = new Router();

agreganmos primeramente la ruta  url:'/', luego funcion [LoginController::class, 'login'])

$router->get('/', [LoginController::class, 'login']);


// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ya funcionando el archivo(creamos el logout), iniciamos el logout en en el archivo "index.php" en la carpeta public 

<?php

require_once __DIR__ . '/../includes/app.php';

use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']); -> Creamos esta linea de codigo.

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

En el programa debemos de hacer que el usuario recupere la contraseña, al momento en el que se le olvide 

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

<?php

require_once __DIR__ . '/../includes/app.php';

use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ahora agregamos la funcion de crear las cuentas:

+--------------------+
|Añadiendo las vistas|
+--------------------+

Es momento de comenzar con el html y el css en el curso.

Nos dirigimos a la carpeta "views" y creamos un archivo llamado "login.php" 

<h1>Login </h1>

Ya creado este codigo, observamos la vista creada en el "LoginController.php" 

<?php

namespace Controllers;

use MVC\Router;

class LoginController
{
  public static function login(Router $router)
  {
    $router->render('auth/login'); ->Agregamos $router->render(); 
  }

  public static function logout()
  {
    echo "Desde Logout";
  }

  public static function olvide()
  {
    echo "Desde Olvide.";
  }

  public static function recuperar()
  {
    echo "Desde Recuperar.";
  }

  public static function crear()
  {
    echo "Desde Crear.";
  }
}

-> Agregando el CSS a la vista:

Primeramente vamos al layaout.php de la carpeta "views"
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>App Salón</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="build/css/app.css">
</head>

<body>

    <div class="contenedor-app"> -> Agregamos este contenedor
        <div class="imagen"></div> -> Luego este Div
        <div class="app">
        <?php echo $contenido; ?> -> Incluimos este div dentro del contenido.
        </div>
    </div>

</body>

</html>

Ahora nos dirigimos al archivo de "login.php" 

<h1 class="nombre-pagina">Login</h1>
<p class="descripcion-pagina">Inicia sesión con tus datos</p>

Ahora nos dirigimos a la carpeta src en la sub carpeta de "scss" vamos a crear una mas llamada "layaout" y a su vez vamos a crear los siguientes archivos, "_index.scss" y "_UI.scss" 

Una vez creado, vamos a agregarlo en el archvio de "app.scss" 

@use 'base';
@use 'layout'; -> Esta carpeta la vamos a agregar al compilador.

Nos dirigimos al archivo de "_index.scss" 
@forward 'UI'; -> Esto es lo que vamos a escribir en el archivo.

Ahora vamos con el css de la pagina en el archivo de "_UI.scss" 

@use "base/variables" as v; -> Vamos a importar las variables de la carpeta base.
@use "base/mixins" as m; -> Vamos a importar los mixins de la carpeta base.

.contenedor-app{
	@include m.tablet{ -> mixins de tablet display de pantalla. 
	display:grid; -> Se vera partido en la cantidad que desee
	grid-templates-columns: repeat(2, 1fr); -> 2 Columnas y 1 fraccion
	min-height: 100vh; -> Que ocupe el minimo del 100% de la altura grafica.
	}
	
	.imagen{ 
		height: 30rem;
		background-image: url(../img/1.jpg); -> Nombre de la imagen a colocar.
		background-size: cover; -> No mas de una imagen 
		background-position: center center; -> centrado
		
		@include m.tablet{
		height: auto; -> Centrado en dispositvos que no sean tan pequeños.
		}
	}
	
	.app{ -> evitar el toque en las orillas
	width: 95%;
	margin: 0 auto;
	padding: 3rem 0;
}

Eso es lo que colocaremos para dar estilo a la primera vista de la pagina.

-> *Creando El Formulario De Autenticacion*
En el archivo de login.php

<h1 class="nombre-pagina">Login</h1>
<p class="descripcion-pagina">Inicia sesión con tus datos</p>

<form class="fomulario" method="POST" action="/"> -> clase para acceder al css  
  <div class="campo"> ->Div para seleccionarlo en el css
    <label for="email">Email</label> -> Nombre para la vista
    <input
      type="email" -> tipo email
      id="email" -> Accesibilidad
      placeholder="Escribe tu email por favor" -> Muestra el mensaje
      name="email" -> Acceder por medio de php a la base de datos. 
      /> 
  </div>

  <div class="campo">
    <label for="password">Password</label> -> Nombre
    <input
      type="password" -> tipo password
      id="password" -> Accesibilidad
      placeholder="Escribe tu contraseña por favor" -> Muestra el mensaje
      name="password" -> Acceder por medio de php a la base de datos.
      />
  </div>

  <input type="submit" class="boton" value="Iniciar Sesión"> -> Enviar el formulario.
</form>

<div class="acciones"> -> Enviar a las paginas para crear una cuenta, o olvidar la contraseña.

  <a href="/crear-cuenta">¿Aun no tienes una cuenta? Crear una</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
  
  La direcciones debe de ser similar a la que esta ene el INDEX que se encuentra en la carpeta public.
  
</div>

->c CSS al formulario
Creamos una carpeta en src/->Llamada componentes y a su vez creamos dos archivos, uno "_formulario.scss" y "_index.scss" 

_index.scss 
@forward 'formulario';

"_formulario.scss"  -> Aqui es donde va a ocurrir la pagina de estilos en scss :D

@use 'base/variables' as v;
@use 'base/mixins' as m;

.formulario {
  width: 100%; -> Que tome el 100% de la vista
}

.campo {
  display: flex; -> Tome una vista de flex
  margin-bottom: 2rem; -> un espaciado 
  align-items: center; -> Texto centrado

  label {
    flex: 0 0 10rem;
  }

  input {
    flex: 1; -> Toma todo el espacio 
    border: none; -> Sin border
    padding: calc(v.$separacion / 4); -> Espaciado del placeHolder
    border-radius: 1rem; -> Radio
  }
}

Y para compilar "app.scss"
@use 'base';
@use 'layout';
@use 'componentes'; -> La carpeta en donde se encuentran los archivos a compilar.

-> CSS al boton Submit
Creamos en la carpeta componentes un archivo "_botones.scss"

Debemos de agregar una linea de comando al archivo "_index.scss" 

@forward 'formulario';
@forward 'botones'; -> Para que lo agregue a la vista

"_botones.scss"

@use 'base/variables' as v;
@use 'base/mixins' as m; -> Para hacerlo responsive.


.boton {
  @include m.boton(v.$azul, v.$blanco);
  border-radius: 1rem;
}


-> Añadiendo Enlaces para Nueva cuenta y Olvide Password
Creamos un archivo llamado "_acciones.scss" 
En el cual vamos a escribir :

@use 'base/variables' as v;
@use 'base/mixins' as m;


.acciones {
  margin-top: v.$separacion; 

  @include m.tablet {
    display: flex; -> Como se veran los espacios
    justify-content: space-between; -> Distancia de cada espacio.
  }

  a {
    color: v.$blanco; -> Letras 
    display: block; -> Ocupa todo el ancho disponible
    margin-bottom: calc(v.$separacion / 2); -> Distancia
    text-align: center; -> Texto centrado
  }
}

-> Creando la Página de Crear Cuenta
¿Que es un enlace parcial en php? Y cuando utilizarlo?

Creamos un archivo en la carpeta auth llamada "crear-cuenta.php"
Creamos un formulario.

<h1 class="nombre-pagina">Crear Cuenta </h1>
<p class="descripcion-pagina">Llena el siguiente formulario para crear una cuenta</p>

<form class="formulario" method="POST" action="/crear-cuenta">
  <div class="campo">
    <label for="nombre">Nombre</label>
    <input
      type="text"
      id="nombre"
      name="nombre"
      placeholder="Tu Nombre" />
  </div>

  <div class="campo">
    <label for="apellido">Apellido</label>
    <input
      type="text"
      id="apellido"
      name="apellido"
      placeholder="Tu apellido" />
  </div>

  <div class="campo">
    <label for="telefono">Telefono</label>
    <input
      type="tel"
      id="telefono"
      name="telefono"
      placeholder="Tu telefono" />
  </div>

  <div class="campo">
    <label for="email">E-mail</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Tu E-mail" />
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Password" />
  </div>

  <input type="submit" value="Crear Cuenta" class="boton">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

Ya las herencias fueron hechas, y se hace mas facil la disposicion de cada una de las herencia.


-> Creando olvide mi password

<h1 class="nombre-pagina">Olvide Password</h1>
<p class="descripcion-pagina"> Restablece tu Password escribiendo tu email a continuacion</p>

<form class="formulario" action="/olvide" method="POST">
  <div class="campo">
    <label for="Email">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Tu Email">
  </div>

  <input type="submit" class="boton" value="Enviar Instrucciones">

</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/crear-cuenta">¿Aun no tienes una cuenta? Crea Una</a>
</div>
* Solo aqui hubo un cambio del resto se mantiene y se crea un solo input, para enviar el email.

*Base de datos 
Las Tablas, Columnas y Relaciones de Nuestra Base de Datos

Vamos a requerir 4 tablas
* Usuarios(Clientes y Admin)
* Citas 
* Servicios
* CitasServicios -> Tablas pivotes

Tabla Usuarios:
+----------+----------------------------------------+
|id	   | int(11)   				    |
|nombre    | varchar(60)		            |
|apellido  | varchar(60) 		   	    |
|email     | varchar(30)			    |
|telefono  | varchar(11)                            |
|admin     | tinyint(1)
|confirmado| tinyint(1)
|token     | varchar(15)
+---------+---------------------------------------------+

Servicios

-> Creando la base de datos usuarios:
Los id en la base de datos son los que van a llevar primarykey ¿Por que?
En la base de datos cuando colocamos el admin en bool lo coloca de forma automatica en tinyint(1) 
Asi que hay que colocarlo en bool para que el gestor de la base de datos lo coloque de forma automatica.

-> Creando la tabla de Citas:
En la tabla de citas no lleva gran cosa, son datos 
id
fecha
hora
usarioId

En la creacion de la llave foranea, en DBeaver le damos en foreign Keys, hacemos la relacion con el identificador(id de usuarios) para que la relacion de tablas sea efectuada, de forma correcta y al introducir datos en las citas sea relacionado con el id de esa base de datos. 


-> Creando la tabla de servicios

-> Creando la tabla CitasServicios:

Para hacer la relacion de cada una de las relaciones en la tabal en las llaves foraneas, hacemos lo siguiente:

Creamos la tabla citasServicios con los siguientes datos :
id
citaId -> id=citas -> id=usuario 
ServicioId -> servicios -> id=usuario

La llave sera citaId->id
La llave sera servicioId->id


-> Modificando las Restricciones de Integridad Referencial
Para que o por que se utiliza funcion mejoras diferenccias, estructura base, relacion estudio y/o beneficio.
On Update: 
On Delete:


+------------------------+
|Creación Cuenta Usuarios|
+------------------------+
Creamos el primer modelo 
"usuario.php"

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }
}

->Instanciando y sincronizando Usuario con el Formulario

 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      echo "enviaste el formulario";
    } -> Utilizaremos el metodo para enviar la informacion desde el formulario al servidor.
    

<?php

namespace Controllers;

use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      echo "enviaste el formulario";
    }

    $router->render('auth/crear-cuenta', []);
  }
}

Ahora vamos a modificar el archivo para que el usuario llene los datos correspondientes.

<?php

namespace Controllers;

use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario = new Usuario($_POST);
      debuguear($usuario);
      
      Ya con esta parte del codigo podemos observar que se envian los datos mediante un object
    }

    $router->render('auth/crear-cuenta', []);
  }
}

Ahora vamos a hacer que el nombre se quede guardado en memoria:
<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario; -> Agregamos una variable
    
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario    -> Agregamos la vista al Router.
    ]);
  }
}

Ahora nos dirigimos a "crear-cuenta.php"

Y agregamos el value sanitizado a cada uno de los campos :D

value="<?php echo s($usuario->nombre); ?>"

<h1 class="nombre-pagina">Crear Cuenta </h1>
<p class="descripcion-pagina">Llena el siguiente formulario para crear una cuenta</p>

<form class="formulario" method="POST" action="/crear-cuenta">
  <div class="campo">
    <label for="nombre">Nombre</label>
    <input
      type="text"
      id="nombre"
      name="nombre"
      placeholder="Tu Nombre"
      value="<?php echo s($usuario->nombre); ?>" /> ->Aqui
  </div>

  <div class="campo">
    <label for="apellido">Apellido</label>
    <input
      type="text"
      id="apellido"
      name="apellido"
      placeholder="Tu apellido"
      value="<?php echo s($usuario->apellido); ?>" /> -> Aqui
  </div>

  <div class="campo">
    <label for="telefono">Telefono</label>
    <input
      type="tel"
      id="telefono"
      name="telefono"
      placeholder="Tu telefono"
      value="<?php echo s($usuario->telefono); ?>" /> -> Aqui
  </div>

  <div class="campo">
    <label for="email">E-mail</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Tu E-mail"
      value="<?php echo s($usuario->email); ?>" /> -> Aqui
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Password" /> ->Aqui no xD
  </div> 

  <input type="submit" value="Crear Cuenta" class="boton">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

Ahora observamos los datos sanitizados para evitar alguna injection de SQL:

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST); -> Observar y mantener los datos desde el POST, es decir, mantenerlos en la vistas.
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario
    ]);
  }
}

-> Validando Creacion de Usuarios:
Debemos de indicar al usuario que es lo que le hace falta: 

Nos ubicamos en Usuarios.php 
Y creamos una nueva funcion llamada validarNuevaCuenta(){}

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  { -> Aqui es donde se valida que el usuario obtenga las crendenciales obligatorias. 
  
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }

    return self::$alertas;
  }
}

Para observar los cambios reflejados nos ubicamos en "LoginController.php"

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta(); -> Agregamos para que sea sincronizado con los datos faltantes

      debuguear($alertas); -> Para mostrar el envio de informacion :D
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario
    ]);
  }
}

-> Creando un template de alertas

<h1 class="nombre-pagina">Crear Cuenta </h1>
<p class="descripcion-pagina">Llena el siguiente formulario para crear una cuenta</p>

<?php debuguear($alertas); ?> ->observarmos si muestra los string de obligatorios

<form class="formulario" method="POST" action="/crear-cuenta">
  <div class="campo">
    <label for="nombre">Nombre</label>
    <input
      type="text"
      id="nombre"
      name="nombre"
      placeholder="Tu Nombre"
      value="<?php echo s($usuario->nombre); ?>" />
  </div>

  <div class="campo">
    <label for="apellido">Apellido</label>
    <input
      type="text"
      id="apellido"
      name="apellido"
      placeholder="Tu apellido"
      value="<?php echo s($usuario->apellido); ?>" />
  </div>

  <div class="campo">
    <label for="telefono">Telefono</label>
    <input
      type="tel"
      id="telefono"
      name="telefono"
      placeholder="Tu telefono"
      value="<?php echo s($usuario->telefono); ?>" />
  </div>

  <div class="campo">
    <label for="email">E-mail</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Tu E-mail"
      value="<?php echo s($usuario->email); ?>" />
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Password" />
  </div>

  <input type="submit" value="Crear Cuenta" class="boton">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

Creamos una carpeta en la carpeta de views a la cual llamaremos templates y dentro de ella ira un archivo llamado alertas.php

Agregamos la carpeta include_once y luego el directorio (__DIR__) y la carpeta templates/alertas.php

<h1 class="nombre-pagina">Crear Cuenta </h1>
<p class="descripcion-pagina">Llena el siguiente formulario para crear una cuenta</p>

<?php
include_once __DIR__ . "/../templates/alertas.php"; -> ya que esta heredada, podemos utilizarla para todas las alertas del codigo 
?>

<form class="formulario" method="POST" action="/crear-cuenta">
  <div class="campo">
    <label for="nombre">Nombre</label>
    <input
      type="text"
      id="nombre"
      name="nombre"
      placeholder="Tu Nombre"
      value="<?php echo s($usuario->nombre); ?>" />
  </div>

  <div class="campo">
    <label for="apellido">Apellido</label>
    <input
      type="text"
      id="apellido"
      name="apellido"
      placeholder="Tu apellido"
      value="<?php echo s($usuario->apellido); ?>" />
  </div>

  <div class="campo">
    <label for="telefono">Telefono</label>
    <input
      type="tel"
      id="telefono"
      name="telefono"
      placeholder="Tu telefono"
      value="<?php echo s($usuario->telefono); ?>" />
  </div>

  <div class="campo">
    <label for="email">E-mail</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Tu E-mail"
      value="<?php echo s($usuario->email); ?>" />
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Password" />
  </div>

  <input type="submit" value="Crear Cuenta" class="boton">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

Hay dos tipos de alertas, la de error y las buenas, lo bueno es que como estamos tratando con un array podemos utilizar un foreach.

Ahora vamos a trabajar en "alertas.php" 

<?php 

foreach ($alertas as $key => $alerta):
  debuguear($key);
endforeach;
Aqui nos debe de marcar un string(5) "error"

Y si lo cambamos por $alertas debe de tener los mensajes:


foreach ($alertas as $key => $alerta):
  debuguear($alertas);
endforeach;

?>

Ahora para que lo observe las alertas: 

<?php

foreach ($alertas as $key => $mensajes):
  foreach ($mensajes as $mensaje):
?>
    <div class="alerta <?php echo $key; ?>">
      <?php echo $mensaje; ?>
    </div>
<?php
  endforeach;
endforeach;
?>

-> CSS a las alertas
Para darle estilos en el css

Nos dirigimos al componentes/index.scss y agregamos el @forward'alertas'; 
Obviamente hay que crearlo

@forward 'formulario';
@forward 'botones';
@forward 'acciones';
@forward 'alertas';

ahora nos ubicamos en el archvio _alertas.scss

@use 'base/variables' as v;

.alerta {
  padding: calc(v.$separacion / 4);
  color: v.$blanco;
  width: 100%;
  display: block;
  margin-bottom: 2rem;
  text-align: center;
  font-weight: v.$bold;
  text-transform: uppercase;

  &.error {
    background-color: v.$rojo;
  }

  &.exito {
    background-color: v.$verde;
  }
}

-> Finalizando la validación

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      debuguear($usuario); -> Observamos si toma la contraseña.
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Ahora agregamos un empty que observe si los datos fueron llenados correctamente.

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) { -> Observa si los datos fueron llenados completamente.
        echo "Pasaste la validacion";
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Ahora debemos de verificar que el usuario no este verificado.

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        //
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

-> Verificar que el usuario no este previamente registrado

Nos ubicamos en el archivo de Usuario.php 
<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1"; -> observar los datos enviados a la base de datos debe mostrarnos 
    debuguear($query); 
    
    string(61) " SELECT * FROM usuarios WHERE email = 'correo@correo' LIMIT 1"
    Para que funcione correctamente en la pagina web
    
  }
}

Ya con la pagina funcionando bien, podemos hacer lo siguiente: 

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM" . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

Observamos si efectua bien con esta nueva variable
    $resultado = self::$db->query($query);

    debuguear($resultado);
  }
}

Debe de mostrarnos algo parecido a esto:

object(mysqli_result)#6 (5) {
  ["current_field"]=>
  int(0)
  ["field_count"]=>
  int(9)
  ["lengths"]=>
  NULL
  ["num_rows"]=>
  int(0)
  ["type"]=>
  int(0)
}

Cuando una persona este registrada en "num_rows" => mostrara un 1 
Para evitar que alla duplicado: Utilizamos el siguiente codigo:

if($resultado->num_rows){
  self::$alertas['error'][] = 'El usuario ya esta registrado';
}
return $resultado;

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);
    if($resultado->num_rows){
  self::$alertas['error'][] = 'El usuario ya esta registrado';
}
  debuguear($resultado);
  
  Debe mostrarnos el navegador lo siguiente:
  object(mysqli_result)#6 (5) {
  ["current_field"]=>
  int(0)
  ["field_count"]=>
  int(9)
  ["lengths"]=>
  NULL
  ["num_rows"]=>
  int(1) -> Aqui el usuario existe, si no exisitiera mostrase un 0
  ["type"]=>
  int(0)
}

  }
}

Ahora nos debe de quedar algo asi:
<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado; -> Llamamos resultado
  }
}

Ahora en el LoginController agregamos las siguientes lineas de codigo:GGgg

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) { -> si existe muestrame una alerta
          $alertas = Usuario::getAlertas();
        } else { -> Si no existe muestrame otra alerta
          //No esta registrado 
          debuguear('No esta registado'); 
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

-> Hashear el Password

Primero obsaervamos su contenido: 

con un debuguear($usuario);

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //No esta registrado 
          debuguear($usuario); -> Observar si no esta registrado.
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Ahora cambiaremos la siguiente estructura:
$ussuario->hashPassowrd(); -> Crear un hasheo de password. Claramente hay que crearlo en el "LoginController.php"

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();
          debuguear($usuario);
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Y para hashear el password lo creamos desde el "Usuario.php"


<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT); -> Esta es la linea de comando para hashear el password es muy importante hacerlo ya que es la seguirdad del usuario lo que debemos de priorizar siempre.
    
    
  }
}

-> Consideraciones cuando los Usuarios crean sus cuentas
* No dejar que los usuarios creen todas las cuentas que quieran 
* Validar que su email exista
* Solicitar un numero telefonico o un sms con codigo.

Para el curso atraves de un token:

Generar token unico:
$this->token = uniquid();

Pero en el archivo de Usuario.php

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected  static $columnasDB = ['id', 'nombre', 'apelllido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public  function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? null;
    $this->confirmado = $args['confirmado'] ?? null;
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid(); -> Lo agregamos en esta linea 
  }
}

<?php

namespace Controllers;

use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          debuguear($usuario);
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}


-> Crear una clase para enviar un email
Utilizaremos php/mailer via composer

composer require phpmailer/phpmailer

Ahora modificamos, creamos una carpeta llamada classes y a su vez creamos un archivo llamado "Email.php"

Ahora nos dirigimos al composer para agregar la carpeta "classses"


  "name": "gustavo/app-salon_mvc",
  "description": "Proyecto PHP 8, MVC, SQL, SASS, Gulp",
  "type": "project",
  "autoload": {
    "psr-4": {
      "MVC\\": "./",
      "Controllers\\": "./controllers",
      "Model\\": "./models",
      "Classes\\": "./classes/" -> Agregamos la clase y luego la importamos en el archivo de "Email.php"

    }
  },
  "authors": [
    {
      "name": "Gustavo"
    }
  ],
  "require": {
    "phpmailer/phpmailer": "^6.11"
  }
}

Luego de esto efectuamos en la terminal un 
composer update para que actualice todos lo modificado.

Ahora nos vamos al archivo de Email.php y agregamos lo siguiente:
<?php

namespace Classes;

class Email {}

Luego nos dirigimos al archvio de LoginController.php

<?php

namespace Controllers;

use Classes\Email; -> Esta Class nos la agrega automaticamente.
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          //generar Token Unico
          $usuario->crearToken();

          //Enviar el email:
          //
          $email = new Email(); -> Agregamos esta linea de codigo, y nos agrega automaticamente el namespace de Class
          debuguear($usuario);
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Ahora nos devolvemos al Email.php

<?php

namespace Classes;

class Email {
  public  $email;
  public  $nombre;
  public  $token;

  public function __construct($email, $nombre, $token)
  {
    $this->email = $email;
    $this->nombre = $nombre;
    $this->token = $token;
  }
}

Ahora nos dirigimos al archivo "LoginController.php"

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          //generar Token Unico
          $usuario->crearToken();

          //Enviar el email:
          //
          $email = new Email($usuario->nombre, $usuario->email, $usuario->token); -> Esta es la vista que vamos a ver, para validar al usuario.
          
          debuguear($email); -> Observar los datos exigidos.
          debuguear($usuario); 
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

-> Enviando un Email con PHPMailer y Mailtrap

Primeramente debemos de tener en cuenta, que no hay una confirmacion de la cuenta en el index.php de la carpeta public, lo cual vamos a agregar:

<?php

namespace MVC\public;

require_once __DIR__ . '/../includes/app.php';

use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

//Crear Cuenta 
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

//Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']); -> Aqui agregamos la direccion para la confirmacion con mailtrap :} SUFRIMOS UNAS DOS HORAS POR ESTE ERROR

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ya agregado vamos a el archivo de LoginController.php

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion(); -> Debemos de crear este codigo para proceder con el envio de informacion a MailTrap
          debuguear($usuario);
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }
}

Nos dirigimos al archivo Email.php

<?php

namespace Classes;

use PHPMailer\PHPMailer\PHPMailer;

class Email
{

  public $nombre;
  public $email;
  public $token;

  public function __construct($nombre, $email, $token)
  {
    $this->email = $email;
    $this->nombre = $nombre;
    $this->token = $token;
  }

  public function enviarConfirmacion()
  {
    //crear el objeto email
    $mail = new PHPMailer();
    $mail->isSMTP();
    $mail->Host = 'smtp.mailtrap.io';
    $mail->SMTPAuth = true;
    $mail->Port = 2525;
    $mail->Username = 'e8479d1f9f2131';
    $mail->Password = 'c31ad6d59fe511';

    $mail->setFrom('cuentas@appsalon.com');
    $mail->addAddress('cuentas@appsalon.com', 'AppSalon.com');
    $mail->Subject = 'Confirma tu cuenta';

    $mail->isHTML(TRUE);
    $mail->CharSet = 'UTF-8';

    $contenido = '<html>';
    $contenido .= "<p><strong>Hola " . $this->nombre . "</strong> Has Creado tu cuenta en App Salón, solo debes confirmarla presionando el siguiente enlace</p>";
    $contenido .= "<p>Presiona aquí: <a href='http://localhost:3000/confirmar-cuenta?token=" . $this->token . "'>Confirmar Cuenta</a>";
    $contenido .= "<p>Si tu no solicitaste este cambio, puedes ignorar el mensaje</p>";
    $contenido .= '</html>';
    $mail->Body = $contenido;

    //Enviar el mail
    $mail->send();

  }
}

-> Registrando al Usuario, Almacenando un Token y enviandolo por Email

creamos un archivo en la carpeta de view/mensaje.php

Agregamos el mensaje al index.php

$router->get('/mensaje', [LoginController::class, 'mensaje']);

<?php

namespace MVC\public;

require_once __DIR__ . '/../includes/app.php';

use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

//Crear Cuenta 
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

//Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']);

//mensaje
$router->get('/mensaje', [LoginController::class, 'mensaje']);
-> Este es el mensaje que debemos de agregar al proyecto para validar el token que nos da en la base de datos.

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ahora nos dirigimos al LoginController:

Agregando mensaje(ROUTER $router){
$router('auth/mensaje');
}

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) { -> Y agregamos la reedireccion. 
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router) -> Aqui mismo
  {
    $router->render('auth/mensaje');
  }
}

Ahora cambiamos unos datos en el constructor:

    $this->id = $args['id'] ?? null; -> Antes era Null
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0'; -> Antes era Null
    $this->confirmado = $args['confirmado'] ?? '0'; -> Antes era Null
    $this->token = $args['token'] ?? '';
    
  <?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }
  
  Nota: Esto se hace para que el valor sea un entero, y sea actualizado de forma automatica.

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }
}

Ahora nos ubicamos en el archivo de mensaje.php:

<h1 class="nombre-pagina">Confirma tu cuenta</h1>
<p class="descripcion-pagina">Hemos enviado las instrucciones para confirmar tu cuenta a tu E-mail</p>

Debemos de comprobar en la base de datos, el token creado y debe de coincidir.

-> Confirmar la cuenta del usuario por email

Debemos de crear una funcion en el LoginController para asi poder efectuar el validador para la confirmacion de usuarios.

Debemos de crear un archivo llamado crear-cuenta.php en la carpeta /auth.

Cuando creamos "crear-cuenta.php" Colocamos lo siguiente

<h1 class="nombre-pagina">Confirmar cuenta</h1>

<?php include_once __DIR__ . '/../templates/alertas.php'; ?>

Ahora nos dirigimos al LoginController.

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = []; -> Mostrar notificacion

    $token = s($_GET['token']); -> Sanitizar el token

    debuguear($token);

    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas -> Mostrar alertas
    ]);
  }
}

Ahora vamos a crear una function en activeRecord:

Lo agregamos luego del id

  public static function where($columna, $valor)
  {
    $query = "SELECT * FROM " . static::$tabla . " WHERE {$columna} = '{$valor}'";
    $resultado = self::consultarSQL($query);
    return array_shift($resultado);
  }
  
<?php

namespace Model;

class ActiveRecord
{

  // Base DE DATOS
  protected static $db;
  protected static $tabla = '';
  protected static $columnasDB = [];

  // Alertas y Mensajes
  protected static $alertas = [];

  // Definir la conexión a la BD - includes/database.php
  public static function setDB($database)
  {
    self::$db = $database;
  }

  public static function setAlerta($tipo, $mensaje)
  {
    static::$alertas[$tipo][] = $mensaje;
  }

  // Validación
  public static function getAlertas()
  {
    return static::$alertas;
  }

  public function validar()
  {
    static::$alertas = [];
    return static::$alertas;
  }

  // Consulta SQL para crear un objeto en Memoria
  public static function consultarSQL($query)
  {
    // Consultar la base de datos
    $resultado = self::$db->query($query);

    // Iterar los resultados
    $array = [];
    while ($registro = $resultado->fetch_assoc()) {
      $array[] = static::crearObjeto($registro);
    }

    // liberar la memoria
    $resultado->free();

    // retornar los resultados
    return $array;
  }

  // Crea el objeto en memoria que es igual al de la BD
  protected static function crearObjeto($registro)
  {
    $objeto = new static;

    foreach ($registro as $key => $value) {
      if (property_exists($objeto, $key)) {
        $objeto->$key = $value;
      }
    }

    return $objeto;
  }

  // Identificar y unir los atributos de la BD
  public function atributos()
  {
    $atributos = [];
    foreach (static::$columnasDB as $columna) {
      if ($columna === 'id')
        continue;
      $atributos[$columna] = $this->$columna;
    }
    return $atributos;
  }

  // Sanitizar los datos antes de guardarlos en la BD
  public function sanitizarAtributos()
  {
    $atributos = $this->atributos();
    $sanitizado = [];
    foreach ($atributos as $key => $value) {
      $sanitizado[$key] = self::$db->escape_string($value);
    }
    return $sanitizado;
  }

  // Sincroniza BD con Objetos en memoria
  public function sincronizar($args = [])
  {
    foreach ($args as $key => $value) {
      if (property_exists($this, $key) && !is_null($value)) {
        $this->$key = $value;
      }
    }
  }

  // Registros - CRUD
  public function guardar()
  {
    $resultado = '';
    if (!is_null($this->id)) {
      // actualizar
      $resultado = $this->actualizar();
    } else {
      // Creando un nuevo registro
      $resultado = $this->crear();
    }
    return $resultado;
  }

  // Todos los registros
  public static function all()
  {
    $query = "SELECT * FROM " . static::$tabla;
    $resultado = self::consultarSQL($query);
    return $resultado;
  }

  // Busca un registro por su id
  public static function find($id)
  {
    $query = "SELECT * FROM " . static::$tabla . " WHERE id = {$id}";

    $resultado = self::consultarSQL($query);
    return array_shift($resultado);
  }


  // Busca un registro por su id
  public static function where($token) -> Aqui colocamos el codigo :D
  {
    $query = "SELECT * FROM " . static::$tabla . " WHERE token = {$token}";

    $resultado = self::consultarSQL($query);
    return array_shift($resultado);
  }


  // Busca un registro por su id
  public static function where($columna, $valor)
  {
    $query = "SELECT * FROM " . static::$tabla . " WHERE {$columna} = '{$valor}'";
    $resultado = self::consultarSQL($query);
    return array_shift($resultado);
  }

  // Consulta Plana de SQL (Utilizar cuando los métodos del modelo no son suficientes)
  public static function SQL($query)
  {
    $resultado = self::consultarSQL($query);
    return $resultado;
  }

  // crea un nuevo registro
  public function crear()
  {
    // Sanitizar los datos
    $atributos = $this->sanitizarAtributos();

    // Insertar en la base de datos
    $query = " INSERT INTO " . static::$tabla . " ( ";
    $query .= join(', ', array_keys($atributos));
    $query .= " ) VALUES (' ";
    $query .= join("', '", array_values($atributos));
    $query .= " ') ";

    // Resultado de la consulta
    $resultado = self::$db->query($query);
    return [
      'resultado' => $resultado,
      'id' => self::$db->insert_id
    ];
  }

  // Actualizar el registro
  public function actualizar()
  {
    // Sanitizar los datos
    $atributos = $this->sanitizarAtributos();

    // Iterar para ir agregando cada campo de la BD
    $valores = [];
    foreach ($atributos as $key => $value) {
      $valores[] = "{$key}='{$value}'";
    }

    // Consulta SQL
    $query = "UPDATE " . static::$tabla . " SET ";
    $query .= join(', ', $valores);
    $query .= " WHERE id = '" . self::$db->escape_string($this->id) . "' ";
    $query .= " LIMIT 1 ";

    // Actualizar BD
    $resultado = self::$db->query($query);
    return $resultado;
  }

  // Eliminar un Registro por su ID
  public function eliminar()
  {
    $query = "DELETE FROM " . static::$tabla . " WHERE id = " . self::$db->escape_string($this->id) . " LIMIT 1";
    $resultado = self::$db->query($query);
    return $resultado;
  }
}

  
Ahora nos ubicamos en el LoginController.php

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token); -> Busca el token pero a su vez lo compara con la base de datos.

    debuguear($usuario);

    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ok al momento de observar los datos del token en "MailTrap" hacemos click, y nos notifica el token en la base de datos y ambos coinciden 

-> Mostrar Mensajes de éxito o error

Para observar si el token es valido utilizamos un "empty"
En el LoginController.php

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      echo "Token no valido";
    } else {
      echo "token valido, confirmado usuario";
    } 
    -> Observar si tenemos un token valido y mostrarlo en pantall

    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora buscamos en el LoginController:

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido'); -> Mostrar error
    } else {
      echo "token valido, confirmado usuario";
    }

    $alertas = Usuario::getAlertas(); -> Mantener en memoria el error, y mostrarlo en la vista.
    
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora observamos el token en la observacion si existe el usuario o no.

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {
      debuguear($usuario); -> Observamos la validacion y si esta confirmado en la base de datos.
    }

    $alertas = Usuario::getAlertas(); -> Se utiliza y busca en 
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}
Ahora vamos a ser que el usuario en vez de confirmado = 0 sea un confirmado = 1

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1"; -> Igualamos el confirmado
      $usuario->token = null; -> hacemos null al token 
      debuguear($usuario);
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $router->render('auth/login');
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar(); -> Guardamos datos.

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Si dicta error de tokenm se debe a que el token como tal no existe pero en la base de datos si existe.

-> Añadiendo la Validación
Requirimos que el usuario este verificado para poder ver el contenido:

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  { -> Vamos a trabajar desde aca:
    $alertas = [];


    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      echo "Dede POST";
    }
    $router->render('auth/login', [
      'alertas' => $alertas
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora debugueamos :

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];


    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      debuguear($auth);
    }
    $router->render('auth/login', [
      'alertas' => $alertas
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Llamamos los datos: 
*email
*password

En el LoginController

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];


    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $auth->validarLogin(); -> Debemos de crear la variable en el Usuario.php

      debuguear($auth);
    }
    $router->render('auth/login', [
      'alertas' => $alertas
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora nos dirigimos al archivo Usuario.php

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin() -> Creamos el validado
  {
    if (!$this->email) { -> LLamamos esta funcion
      self::$alertas['error'][] = 'El email es Obligatorio';
    } 
    if (!$this->password) { -> Llamamos esta funcion
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas; -> Retornamos.
    
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }
}

Ahora nos ubicamos en el login.php cuando ya esta listo todo
Para utilizar las alertas en el archivo de login.php 

<h1 class="nombre-pagina">Login</h1>
<p class="descripcion-pagina">Inicia sesión con tus datos</p>

<?php -> utilizamos esta linea de codigo
include_once __DIR__ . "/../templates/alertas.php";
?>

<form class="fomulario" method="POST" action="/">
  <div class="campo">
    <label for="email">Email</label>
    <input
      type="email"
      id="email"
      placeholder="Escribe tu email por favor"
      name="email" />
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      placeholder="Escribe tu contraseña por favor"
      name="password" />
  </div>

  <input type="submit" class="boton" value="Iniciar Sesión">
</form>

<div class="acciones">
  <a href="/crear-cuenta">¿Aun no tienes una cuenta? Crear una</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

Podemos hacer que guarde los datos del correo, pero no la contraseña.

LoginController.php 

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();
    }
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth -> Mostrar correo guardado en memoria
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Login.php 

<h1 class="nombre-pagina">Login</h1>
<p class="descripcion-pagina">Inicia sesión con tus datos</p>

<?php
include_once __DIR__ . "/../templates/alertas.php";
?>

<form class="fomulario" method="POST" action="/">
  <div class="campo">
    <label for="email">Email</label>
    <input
      type="email"
      id="email"
      placeholder="Escribe tu email por favor"
      name="email"
      value="<?php echo s($auth->email); ?>" -> Muestrame el valor almacenado en la nube, por favor. 
      />
  </div>

  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      placeholder="Escribe tu contraseña por favor"
      name="password" />
  </div>

  <input type="submit" class="boton" value="Iniciar Sesión">
</form>

<div class="acciones">
  <a href="/crear-cuenta">¿Aun no tienes una cuenta? Crear una</a>
  <a href="/olvide">¿Olvidaste el Password?</a>
</div>

->Verificando si el usuario existe

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) { -> obserrvamos si agrego email y password
        echo "Usuario agrego tanto email como password";
      }
    }
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Observar en la base de datos la informacion
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);->busca en la base de datos, la informacion del usuario.

        debuguear($usuario); ->Observar en el base de datos en el navegador
      }
    }
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}


Observar si esta el usuario encontrado
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Comprobar null en el navegador 

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          debuguear($usuario);
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Agregamos comprobarPassworAndVerificado(){
debuguear($this);
}
<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin()
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado() -> Agregamos aca
  {
    debuguear($this);
  }
}

-> Revisar Password del usuario

Debemos de agregar los siguientes codigo: 

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario; -> No sobrescribe los datos en la base de Datos.

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          $usuario->comprobarPasswordAndVerificado();
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Agregamos los datos que el usuario envie:

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas =  $auth->validarLogin();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          $usuario->comprobarPasswordAndVerificado($auth->password); -> En esta parte del codigo se puede efectuar.
          
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario  = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora agregamos la configuracion en comprobarPasswordAndVerificado()

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin()
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado($password)
  {
    $resultado = password_verify($password, $this->password);

    debuguear($resultado);
  }
}

-> Validar si el usuario esta Confirmado

Podemos confirmar al usuario pero, debemos de crear uno en la parte de crear cuenta. 

Nos dirigimos al Usuario.php

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin()
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado($password): void
  {
    $resultado = password_verify($password, $this->password);

    if (!$this->confirmado) { -> Agregamos esta comprobacion para asi saber que el usuario esta o no confirmado.

      debuguear('El usuario no esta confirmado');
    } else {
      debuguear('El usuario ya se encuentra confirmado');
    }
  }
}
Luego de que el string no los muestre el navegador, efectuamos la siguiente comproboacion:

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin()
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado($password)
  {
    $resultado = password_verify($password, $this->password);

    if (!$resultado || !$this->confirmado) {
      self::$alertas['error'][] = 'Password Incorrecto o tu cuenta no ha sido confirmada';
    } else {
      return true; -> Si es verdadero returna confirmado, si es falso solo resulta en un resultado y no avanza.
    }
  }
}
: mysqli::escape_string(): Passing null to parameter #1 ($string) of type string is deprecated in
/media/gustavo/d20195cc-f555-40ef-81dc-0e6c7f5d37c7/Proyecto/udemy/17/AppSalon_MVC/models/ActiveRecord.php
on line

El usuario debe de ser autenticado

-> Autenticar al Usuario
Ya el usuario envio los datos correctamente solo nos hace falta autenticar al usuario:

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start(); -> Iniciamos la instancia(Sesion)

            $_SESSION['id'] = $usuario->id; -> Mostrar el identificador
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido; nombre apellido del usuario/admin 
            $_SESSION['email'] = $usuario->email; -> Observar email
            $_SESSION['login'] = true; -> Si es tru 

            if ($usuario->admin == "1") { condicional 
              debuguear('Es admin');
            } else {
              debuguear('Es Cliente');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router)
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Redireccionamos al usuario cliente y el de citas:

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") { -> Si es admin 
              $_SESSION['admin'] = $usuario->admin ?? null;
            } else { -> Redireccionar al cliente para agendar cita
              header('Location: /cita')
            }
            debuguear($_SESSION);
          }

        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ya cuando sea admin, o cita, la reedireccion sera a cada pagina por separado:
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null; -> muestra admin en el array del navegador

              header('Location: /admin'); -> Redireccion a /admin 

            } else {
              header('Location: /cita'); -> Redireccion a /citas
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $router->render('auth/olvide-password', []);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
           }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

-> Añadiendo Validación
LoginController.php
Token de un solo uso, para restablecer la contraseña si el usuario la olvida.

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario();

      debuguear($auth);

    }

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

Ahora la agregamos en el codigo:
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');

            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  { -> Nos ubviamos en esta function para efectuar el codigo.
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario();

      debuguear($auth);

    }

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora agregamos:

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario();
      $alertas = $auth->validarEmail();

      debuguear($auth);

    }

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');

            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario();
      $alertas = $auth->validarEmail();

      debuguear($auth);

    }

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora nos ubicamos en el archivo de LoginController para agregar una nueva function 

  public function validarEmail(): array
  {
    if (!$this->email) {
      self::$alertas['error'][] = ' El email es Obligatorio';
    }
    return self::$alertas;
  }

  <?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin(): array
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  public function validarEmail()
  {
    if (!$this->email) {
      self::$alertas['error'][] = ' El email es Obligatorio';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado($password)
  {
    $resultado = password_verify($password, $this->password);

    if (!$resultado || !$this->confirmado) {
      self::$alertas['error'][] = 'Password Incorrecto o tu cuenta no ha sido confirmada';
    } else {
      return true;
    }
  }
}

Ya se muestra en el navegador la alerta de "El email es obligatorio"

<h1 class="nombre-pagina">Olvide Password</h1>
<p class="descripcion-pagina"> Restablece tu Password escribiendo tu email a continuacion</p>

<?php
include_once __DIR__ . "/../templates/alertas.php"; ->Agregamos para mostrarlo en la pagina al momento de enviar el formulario. Sin nada
?>

<form class="formulario" action="/olvide" method="POST">
  <div class="campo">
    <label for="email">Email</label>
    <input type="email" id="email" name="email" placeholder="Tu Email">
  </div>

  <input type="submit" class="boton" value="Enviar Instrucciones">

</form>

<div class="acciones">
  <a href="/">¿Ya tienes una cuenta? Inicia Sesión</a>
  <a href="/crear-cuenta">¿Aun no tienes una cuenta? Crea Una</a>
</div>

Ya con esto agregado podemos proceder a REALIZAR LA MUESTRA en el navegador

-> Verificar que el usuario exista y este confirmado

 public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) { -> Observar si el correo ingresado coincide con la base de datos
        $usuario = Usuario::where('email', $auth->email);
        debuguear($usuario);
      }
    }

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

Para confirmar en la base de datos:
  if (empty($alertas)) {
    $usuario = Usuario::where('email', $auth->email);
     if ($usuario && $usuario->confirmado === "1") { -> Comparacion en la base de datos
       debuguear('Si existe y esta confirmado');
     } else { -> Muestra un mensaje en la pagina de olvide
     Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
      $alertas = Usuario::getAlertas();
     }
 }


 <?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          debuguear('Si existe y esta confirmado');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
          $alertas = Usuario::getAlertas();
        }
      }
    }

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ahora vamos a agregar el token 

public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          Usuario::setAlerta('exito', 'Revisa tu email'); -> Envia el mensaje exitoso.
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado'); -> Envia notificacion para falta en la base de datos
        }
      }
    }
    $alertas = Usuario::getAlertas(); -> Una sola alerta en un solo codigo.

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

Asi quedaria en el codigo.

 <?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

-> Enviar un email con las instrucciones
Siempre y cuando estge confirmado el usuario el puede proceder a solicitar la recuperacion del correo electronico.

En el archivo Email.php

  public function enviarInstrucciones()
  { -> Este es eñ nuevo metodo que agregaremos.
    //crear el objeto email
    $mail = new PHPMailer();
    $mail->isSMTP();
    $mail->Host = 'smtp.mailtrap.io';
    $mail->SMTPAuth = true;
    $mail->Port = 2525;
    $mail->Username = 'e8479d1f9f2131';
    $mail->Password = 'c31ad6d59fe511';

    $mail->setFrom('cuentas@appsalon.com');
    $mail->addAddress('cuentas@appsalon.com', 'AppSalon.com');
    $mail->Subject = 'Restablece tu password';

    $mail->isHTML(TRUE);
    $mail->CharSet = 'UTF-8';

    $contenido = '<html>';
    $contenido .= "<p><strong>Hola " . $this->nombre . "</strong>Has solicitado restablecer tu password, sigue el siguiente enlace para hacerlo </p>";
    $contenido .= "<p>Presiona aquí: <a href='http://localhost:3000/recuperar?token=" . $this->token . "'>Restablecer Password</a>";
    $contenido .= "<p>Si tu no solicitaste este cambio, puedes ignorar el mensaje</p>";
    $contenido .= '</html>';
    $mail->Body = $contenido;

    //Enviar el mail
    $mail->send();
  }


<?php

namespace Classes;

use PHPMailer\PHPMailer\PHPMailer;

class Email
{

  public $nombre;
  public $email;
  public $token;

  public function __construct($nombre, $email, $token)
  {
    $this->email = $email;
    $this->nombre = $nombre;
    $this->token = $token;
  }

  public function enviarConfirmacion()
  {
    //crear el objeto email
    $mail = new PHPMailer();
    $mail->isSMTP();
    $mail->Host = 'smtp.mailtrap.io';
    $mail->SMTPAuth = true;
    $mail->Port = 2525;
    $mail->Username = 'e8479d1f9f2131';
    $mail->Password = 'c31ad6d59fe511';

    $mail->setFrom('cuentas@appsalon.com');
    $mail->addAddress('cuentas@appsalon.com', 'AppSalon.com');
    $mail->Subject = 'Confirma tu cuenta';

    $mail->isHTML(TRUE);
    $mail->CharSet = 'UTF-8';

    $contenido = '<html>';
    $contenido .= "<p><strong>Hola " . $this->nombre . "</strong> Has Creado tu cuenta en App Salón, solo debes confirmarla presionando el siguiente enlace</p>";
    $contenido .= "<p>Presiona aquí: <a href='http://localhost:3000/confirmar-cuenta?token=" . $this->token . "'>Confirmar Cuenta</a>";
    $contenido .= "<p>Si tu no solicitaste este cambio, puedes ignorar el mensaje</p>";
    $contenido .= '</html>';
    $mail->Body = $contenido;

    //Enviar el mail
    $mail->send();
  }

  public function enviarInstrucciones()
  {
    //crear el objeto email
    $mail = new PHPMailer();
    $mail->isSMTP();
    $mail->Host = 'smtp.mailtrap.io';
    $mail->SMTPAuth = true;
    $mail->Port = 2525;
    $mail->Username = 'e8479d1f9f2131';
    $mail->Password = 'c31ad6d59fe511';

    $mail->setFrom('cuentas@appsalon.com');
    $mail->addAddress('cuentas@appsalon.com', 'AppSalon.com');
    $mail->Subject = 'Restablece tu password';

    $mail->isHTML(TRUE);
    $mail->CharSet = 'UTF-8';

    $contenido = '<html>';
    $contenido .= "<p><strong>Hola " . $this->nombre . "</strong>Has solicitado restablecer tu password, sigue el siguiente enlace para hacerlo </p>";
    $contenido .= "<p>Presiona aquí: <a href='http://localhost:3000/recuperar?token=" . $this->token . "'>Restablecer Password</a>";
    $contenido .= "<p>Si tu no solicitaste este cambio, puedes ignorar el mensaje</p>";
    $contenido .= '</html>';
    $mail->Body = $contenido;

    //Enviar el mail
    $mail->send();
  }
}

 public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email); -> Agregamos 
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->email, $usuario->nombre, $usuario->token); ->Email
          $email->enviarInstrucciones(); -> Enviar instrucciones al enalce de mailtrap
          Usuario::setAlerta('exito', 'Revisa tu email'); -> Mensaje
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(): void
  {
    echo "Desde Recuperar.";
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

-> Crear la vista para recuperar el password

Seguimos en en LoginController ahora vamos a efectuar lo siguiente para observar los cambios en la ruta de recuperar:
 
 Primeramente debemos de crear una ruta en auth->recuperar-password.php

 Luego de eso debemos de tener en el LoginController el router y la vista:

  public static function recuperar(Router $router)
  {
    $router->render('auth/recuperar-password', []);
  }

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(Router $router)
  {
    $router->render('auth/recuperar-password', []);
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Ya de aqui podemos modificar el archivo :D 

<h1 class="nombre-pagina">Recuperar Password </h1>
<p class="descripcion-pagina">Coloca tu nuevo Password a continuacion</p>

<form class="formulario" method="POST">
  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Nuevo Password" />
  </div>
  <input type="submit" class="boton" value="Restablece tu Password">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes cuenta? Iniciar Sesion</a>
  <a href="/crear-cuenta">¿Aun no tienes cuenta? Crea una</a>
</div>

Ahora falta validar el token creado desde la base de datos:

-> Validar el token
  public static function recuperar(Router $router)
  {
    $alertas = [];
    $token = s($_GET['token']);

    debuguear($token);
    $router->render('auth/recuperar-password', []);
  }
Debe de coincidir con el de la base de datos 

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(Router $router)
  {
    $alertas = [];
    $token = s($_GET['token']);

    debuguear($token);
    $router->render('auth/recuperar-password', []);
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Buscamos al usuario en la base de datos con un token que se genera de forma automatica
public static function recuperar(Router $router)
  {
    $alertas = [];
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    debuguear($usuario);

    debuguear($token);
    $router->render('auth/recuperar-password', [
      'alertas' => $alertas
    ]);
  }
<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(Router $router)
  {
    $alertas = [];
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    debuguear($usuario);

    debuguear($token);
    $router->render('auth/recuperar-password', [
      'alertas' => $alertas
    ]);
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Para no observar el diseño de pantalla creamos una funcion nueva.

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }
En el archvio de recuperar-password 

<h1 class="nombre-pagina">Recuperar Password </h1>
<p class="descripcion-pagina">Coloca tu nuevo Password a continuacion</p>

<?php
include_once __DIR__ . "/../templates/alertas.php";
?>

<?php if ($error) return; ?>

<form class="formulario" method="POST">
  <div class="campo">
    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      placeholder="Tu Nuevo Password" />
  </div>
  <input type="submit" class="boton" value="Restablece tu Password">
</form>

<div class="acciones">
  <a href="/">¿Ya tienes cuenta? Iniciar Sesion</a>
  <a href="/crear-cuenta">¿Aun no tienes cuenta? Crea una</a>
</div>

-> Almacenar el nuevo Password:

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);

      debuguear($password);
    }
    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }

<?php

namespace Controllers;

use Classes\Email;
use Model\Usuario;
use MVC\Router;

class LoginController
{
  public static function login(Router $router): void
  {
    $alertas = [];
    $auth = new Usuario;

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);

      $alertas = $auth->validarLogin();
      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);

        if ($usuario) {
          if ($usuario->comprobarPasswordAndVerificado($auth->password)) {

            session_start();

            $_SESSION['id'] = $usuario->id;
            $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
            $_SESSION['email'] = $usuario->email;
            $_SESSION['login'] = true;

            if ($usuario->admin === "1") {
              $_SESSION['admin'] = $usuario->admin ?? null;

              header('Location: /admin');
            } else {
              header('Location: /cita');
            }

            debuguear($_SESSION);
          }
        } else {
          Usuario::setAlerta('error', 'Usuario no encontrado');
        }
      }
    }
    $alertas = Usuario::getAlertas();
    $router->render('auth/login', [
      'alertas' => $alertas,
      'auth' => $auth
    ]);
  }

  public static function logout(): void
  {
    echo "Desde Logout";
  }

  public static function olvide(Router $router): void
  {
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $auth = new Usuario($_POST);
      $alertas = $auth->validarEmail();

      if (empty($alertas)) {
        $usuario = Usuario::where('email', $auth->email);
        if ($usuario && $usuario->confirmado === "1") {
          $usuario->crearToken();
          $usuario->guardar();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarInstrucciones();
          Usuario::setAlerta('exito', 'Revisa tu email');
        } else {
          Usuario::setAlerta('error', 'El usuario no existe o no esta confirmado');
        }
      }
    }
    $alertas = Usuario::getAlertas();

    $router->render('auth/olvide-password', [
      'alertas' => $alertas
    ]);
  }

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);

      debuguear($password);
    }



    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }

  public static function crear(Router $router): void
  {
    $usuario = new Usuario;

    //alertas Vacias 
    $alertas = [];
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $usuario->sincronizar($_POST);
      $alertas = $usuario->validarNuevaCuenta();

      //revision de alertas vacias

      if (empty($alertas)) {
        //Verificar si el usuario no esta verificado:
        $resultado = $usuario->existeUsuario();

        if ($resultado->num_rows) {
          $alertas = Usuario::getAlertas();
        } else {
          //Hashear el password
          $usuario->hashPassword();

          $usuario->crearToken();

          $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
          $email->enviarConfirmacion();

          //Crea al Usuario: 
          $resultado = $usuario->guardar();
          if ($resultado) {
            echo "Guardado Correctamente";
          }
          /* debuguear($usuario); */

          if ($resultado) {
            header('Location: /mensaje');
          }
        }
      }
    }

    $router->render('auth/crear-cuenta', [
      'usuario' => $usuario,
      'alertas' => $alertas
    ]);
  }

  public static function mensaje(Router $router)
  {
    $router->render('auth/mensaje');
  }

  public static function confirmar(Router $router): void
  {
    $alertas = [];

    $token = s($_GET['token']);

    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token no valido');
    } else {

      $usuario->confirmado = "1";
      $usuario->token = null;
      $usuario->guardar();

      Usuario::setAlerta('exito', 'Cuenta Comprobada Correctamente');
    }

    $alertas = Usuario::getAlertas();
    $router->render('auth/confirmar-cuenta', [
      'alertas' => $alertas
    ]);
  }
}

Al momento de validar el password debemos de validar que cumpla con un minimo de caracteres.
Nos ubicamos en el Usuario.php, donde debemos de crear una nueva funcion:

  public function validarPassword() -> funcion creada, y las alertas:
  {
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El password debe tener al menos 6 caracteres';
    }
    return self::$alertas;
  }

<?php

namespace Model;

class Usuario extends ActiveRecord
{

  //base de datos
  protected static $tabla = 'usuarios';
  protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'admin', 'confirmado', 'token'];

  public $id;
  public $nombre;
  public $apellido;
  public $email;
  public $password;
  public $telefono;
  public $admin;
  public $confirmado;
  public $token;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->apellido = $args['apellido'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->password = $args['password'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->admin = $args['admin'] ?? '0';
    $this->confirmado = $args['confirmado'] ?? '0';
    $this->token = $args['token'] ?? '';
  }

  //mensajes de validacion para la creacion de cuentas:
  public function validarNuevaCuenta()
  {
    if (!$this->nombre) {
      self::$alertas['error'][] = 'El Nombre del Cliente es Obligatorio';
    }

    if (!$this->apellido) {
      self::$alertas['error'][] = 'El Apellido del Cliente es Obligatorio';
    }

    if (!$this->email) {
      self::$alertas['error'][] = 'El Email del Cliente es Obligatorio';
    }

    if (!$this->password) {
      self::$alertas['error'][] = 'El Password del Cliente es Obligatorio';
    }

    if (!$this->telefono) {
      self::$alertas['error'][] = 'El Telefono del Cliente es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El Password debe contener 6 caracteres ';
    }
    return self::$alertas;
  }

  public function validarLogin(): array
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }

    return self::$alertas;
  }

  public function validarEmail(): array
  {
    if (!$this->email) {
      self::$alertas['error'][] = 'El email es Obligatorio';
    }
    return self::$alertas;
  }

  public function validarPassword()
  {
    if (!$this->password) {
      self::$alertas['error'][] = 'El password es Obligatorio';
    }
    if (strlen($this->password) < 6) {
      self::$alertas['error'][] = 'El password debe tener al menos 6 caracteres';
    }
    return self::$alertas;
  }

  //revisa si un usuario ya existe
  public function existeUsuario()
  {
    $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";

    $resultado = self::$db->query($query);

    if ($resultado->num_rows) {
      self::$alertas['error'][] = 'El usuario ya esta registrado';
    }
    return $resultado;
  }

  public function hashPassword()
  {
    $this->password = password_hash($this->password, PASSWORD_BCRYPT);
  }

  public function crearToken()
  {
    $this->token = uniqid();
  }

  public function comprobarPasswordAndVerificado($password)
  {
    $resultado = password_verify($password, $this->password);

    if (!$resultado || !$this->confirmado) {
      self::$alertas['error'][] = 'Password Incorrecto o tu cuenta no ha sido confirmada';
    } else {
      return true;
    }
  }
}

Nos devolvemos al LoginController.php


  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);
      $alertas = $password->validarPassword(); ->agregamos
      debuguear($password);
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }
Ahora agregamos una validacion para el arreglo if(empty())

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);
      $alertas = $password->validarPassword();

      if (empty($alertas)) {
        $usuario->password = null;

        debuguear($password);
        $usuario->password = $password->password;
      }
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }
debugueamos al usuario ya que es quien trae toda la informacion.
  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);
      $alertas = $password->validarPassword();

      if (empty($alertas)) {
        $usuario->password = null;

        $usuario->password = $password->password;
        debuguear($usuario);
      }
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }
Hasheamos la contraseña y volvemos al token null:

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);
      $alertas = $password->validarPassword();

      if (empty($alertas)) {
        $usuario->password = null;

        $usuario->password = $password->password;
        $usuario->hashPassword();
        $usuario->token = null;
        debuguear($usuario);
      }
    }

    /* debuguear($usuario); */
    $alertas = Usuario::getAlertas();

    $router->render('auth/recuperar-password', [
      'alertas' => $alertas,
      'error' => $error
    ]);
  }
Redireccionar al tipo admin/cita 

  public static function recuperar(Router $router): void
  {
    $alertas = [];
    $error = false;
    $token = s($_GET['token']);

    //buscar usuario por token 
    $usuario = Usuario::where('token', $token);

    if (empty($usuario)) {
      Usuario::setAlerta('error', 'Token No Valido');
      $error = true;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      //Leer el nuevo password y guardarlo
      //
      $password = new Usuario($_POST);
      $alertas = $password->validarPassword();

      if (empty($alertas)) {
        $usuario->password = null;

        $usuario->password = $password->password;
        $usuario->hashPassword();
        $usuario->token = null;

        $resultado = $usuario->guardar();
        if ($resultado) {
          //Redireccion
          header('location: /'); -> si es admin o cita
        }
      }
    }

->Creando Routing y Controllers para Citas
Debemos de crear
*CitaController.php
*Agregar al index.php $router->get()
*cita

Creamos una carpeta en views llamada cita->dentro de ella creamos una archivo llamado index.php 

dentro de index.php va a ir lo siguiente:

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

Ahora vamos a crear el controlador para que muestre en el controlador:

<?php

namespace Controllers; -> composer lo agregara al momento de efectuar algun cambio en el router.

use MVC\Router;

class CitaController
{
  public static function index(Router $router)
  {
    $router->render('cita/index',);
  }
}

Ahora para mostrarlo en la vista de public, lo agregamos al index.php 

<?php

namespace MVC\public;

require_once __DIR__ . '/../includes/app.php';

use Controllers\CitaController;
use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

//Crear Cuenta 
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

//Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']);

//mensaje
$router->get('/mensaje', [LoginController::class, 'mensaje']);


//AREA PRIVADA 
$router->get('/cita', [CitaController::class, 'index']); -> Ahora se va a mostrar el archivo.


// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

->Añadiendo los Contenedores Principales
Los div van a ir vacios ya que vamos a consultar la base de datos con javascript

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p>Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p>Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Servicios</h2>
    <p>Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>
</div>

-> Mostrar el Nombre del usuario autenticado

CitaController.php 

<?php

namespace Controllers;

use MVC\Router;

class CitaController
{
  public static function index(Router $router)
  {
    session_start();

    debuguear($_SESSION);-> Ver valores y/o datos de la sesion actual.
    $router->render('cita/index', [
      'nombre' => $_SESSION['nombre'] -> Mostrar los valores de la sesion.
    ]);
  }
}

Para mostrarlo en la vista nos dirigimos al archvio del index.php en la carpeta de citas.
<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p>Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p>Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input
            id="nombre"
            type="text"
            placeholder="Tu Nombre" 
            value = "<?php echo $nombre;?>"
            />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input
            id="fecha"
            type="date" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input
            id="hora"
            type="time" />
        </div>

      </form>
    </div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Resumen</h2>
    <p>Verifica que la informacion sea correcta</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>
</div>

Ahora que podemos modificarlo, debemos de bloquearlo para que no sea modificable para el usuario, con un disabled 

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p>Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p>Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input
            id="nombre"
            type="text"
            placeholder="Tu Nombre"
            value="<?php echo $nombre; ?>"
            disabled  -> Justo aqui
            />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input
            id="fecha"
            type="date" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input
            id="hora"
            type="time" />
        </div>

      </form>
    </div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Resumen</h2>
    <p>Verifica que la informacion sea correcta</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>
</div>

Agregamos en el p class ="text-center"

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p class="text-center">Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p class="text-center">Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input id="nombre" type="text" placeholder="Tu Nombre" value="<?php echo $nombre; ?>" -> esta es para observar el nombre del usuario creado
           disabled 
           />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input id="fecha" type="date" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input id="hora" type="time" />
        </div>

      </form>
    </div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Resumen</h2>
    <p class="text-center">Verifica que la informacion sea correcta</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>
</div>

Ahora debemos de modificar el sass en css _formulario.scss

@use 'base/variables' as v;
@use 'base/mixins' as m;

.formulario {
  margin-top: 5rem;
  width: 100%;
}

.campo {
  display: flex;
  margin-bottom: 2rem;
  align-items: center;

  label {
    flex: 0 0 10rem;
  }

  input {
    flex: 1;
    border: none;
    padding: calc(v.$separacion / 4);
    border-radius: 1rem;

    &:disabled {
      background-color: lighten(v.$negro, 30%);
      color: v.$blanco;
      cursor: not-allowed;
    }
  }
}

Creamos un nuevo archivo en la carpeta de layaout
_cita.scss
.seccion {

  .text-center {
    text-align: center;
  }

  &:nth-child(2), -> Para ocultarlos
  &:nth-child(3) {
    display: none;
  }
}

->Creando Tabs para navegación
Que es un atributo en html5?

Nos ubicamos en el index de la carpeta cita 

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <nav class="tabs"> -> por esto la pregunta
    <button type="button" data-paso="1" ->Se utiliza data-paso como atributo >Servicios</button>
    <button type="button" data-paso="2">Informacion Cita</button>
    <button type="button" data-paso="3">Resumen</button>
  </nav>
  
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p class="text-center">Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p class="text-center">Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input id="nombre" type="text" placeholder="Tu Nombre" value="<?php echo $nombre; ?>" disabled />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input id="fecha" type="date" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input id="hora" type="time" />
        </div>

      </form>
    </div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Resumen</h2>
    <p class="text-center">Verifica que la informacion sea correcta</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>
</div>

->Creando Botones para Paginador

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <nav class="tabs">
    <button class="" type="button" data-paso="1">Servicios</button>
    <button type="button" data-paso="2">Informacion Cita</button>
    <button type="button" data-paso="3">Resumen</button>
  </nav>
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p class="text-center">Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p class="text-center">Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input id="nombre" type="text" placeholder="Tu Nombre" value="<?php echo $nombre; ?>" disabled />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input id="fecha" type="date" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input id="hora" type="time" />
        </div>

      </form>
    </div>
  </div>

  <div id="paso-3" class="seccion">
    <h2>Resumen</h2>
    <p class="text-center">Verifica que la informacion sea correcta</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div class="paginacion">
    <button
      id="anterior"
      class="boton">&laquo; Anterior </button> -> Esto son los botones que se mostrarar abajo

    <button
      id="anterior"
      class="boton">Siguiente &raquo;</button>  -> Esto son los botones que se mostrarar abajo
  </div>

</div>

Ahora agregamos un archvio en src/componentes/ y creamos un archivo _paginacion.scss 

@use 'base/variables' as v;
@use 'base/mixins' as m;

.paginacion {
  padding: v.$separacion 0;

  @include m.telefono {
    display: flex;
    justify-content: space-between;
  }

  button {
    margin: 0 0 1rem 0;
  }
}

Ahora lo agregamos al index.scss

@forward 'formulario';
@forward 'botones';
@forward 'acciones';
@forward 'alertas';
@forward 'tabs';
@forward 'paginacion'; -> Este archivo es el que se va a modifcar.
Ahora falta agregar la parte dinamica pero eso se hara con JavaScript

-> Añadiendo Script 

Nos ubicamos en el archivo de _citas.scss y modificamos:

.seccion {
  padding: 5rem 0;
  display: none; -> Movemos el display none para la seccion

  .text-center {
    text-align: center;
  }
}

.mostrar { -> Agregamos un mostrar para el javascript
  display: block;
}

.ocultar { Agregamos un ocultar para el javascript
  display: none;
}

Ahora nos vamos al layout.php 

Y agregamos el $script ?? ''; -> Si no carga agregar un string vacio.

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>App Salón</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="build/css/app.css">
</head>

<body>

  <div class="contenedor-app">
    <div class="imagen"></div>
    <div class="app">
      <?php echo $contenido; ?>
    </div>
  </div>

  <?php
  echo $script ?? '';
  ?>

</body>

</html>

Luego no dirigimos al archivo de index.php ubicado en la carpeta de cita
<?php 
  $script = "
  <script src='build/js/app.js'></script>
  ";
?>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>App Salón</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="build/css/app.css">
</head>

<body>

  <div class="contenedor-app">
    <div class="imagen"></div>
    <div class="app">
      <?php echo $contenido; ?>
    </div>
  </div>

  <?php
  echo $script ?? '';
  ?>

</body>

</html>

Ahora nos ubicamos en el archivo de app.js de la carpeta src/js/app.js 

Colocamos un alert para observar si esta efectuando los cambios.

alert('Desde app.js');

-> Primeros pasos con la Navegación por Tabs
let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  alert('App Lista');
}

Para que me muestre un nodelist:

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');

  console.log(botones);
}

Debemos de iterara en cada uno de los botones, con un forEach() en javascript

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => { -> Accedemos a cada iteracion dinamica
    boton.addEventListener('click', function () { -> ahora si podemos utilizarlo.
      console.log('diste click');
    });
  })

}
Targent en eventos de Javascript(DOM STRING)

Para agregar un evento en Javascript:
let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) { -> agregamos una e en function(e)
      console.log(e);
    });
  })

}
Nos vamos a centrar en DOMStringMap -> ¿QUE ES?
let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      console.log(e.target.dataset.paso);
    });
  })

}

Para poder observar cada una de lo que presionamos en el html agregamos lo siguiente

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      console.log(e.target.paso);
    });
  })
}

Para observar el tipo de dato en javacript usamos typeof

<let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      console.log(typeof e.target.dataset.paso);
    });
  })
}
Debe de marcarnos un dato tipo string

Debemos de pasarlo a entero para que asi sea mas facil y entendible al sistema.
Y eso lo logramos con paseInt();

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      console.log(parseInt(e.target.dataset.paso));
    });
  })
}

Ahora debemos de mostrarla en cada paso: 

Igualamos paso = parseInt(e.target.dataset.paso);

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
    });
  })
}

->Cambiando la sección según el Tab presionado

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function mostarSeccion() {
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');
}

Nota: Esta medida efectua el cambio pero nos sobrecarga el DOM, es decir que al momento de presionar cada uno los inputs, se muestra cada uno de ellos encima de cada uno. 

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();
    });
  })
}
Para evitarlo incluimos lo siguiente es observarlo y removerlo si no esta activo.

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  tabs();
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) { 
    seccionAnterior.classList.remove('mostrar');
  }
Nota: Condicionamos si no se a declarado, ya que nos marca un error nulo, en el momento que se presiona, cada uno de los inputs, pero al momento de colocarle un if(seccionAnterior) soluciona su condicional.


  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();
    });
  })
}
Lo malo es que no carga los datos al momento de abrir servicios automaticamente.

->Finalizando la navegación por tabs

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) {
    seccionAnterior.classList.remove('mostrar');
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');

//mostrar tab actual
Como acutalizarlo conforme al input presionado
  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add('actual');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();
    });
  })
}

Igual que el paso anterior debemos de remover el estado actual por que se sobrecarga el DOM 

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) {
    seccionAnterior.classList.remove('mostrar');
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');

//Remove tabAnterior
  const tabAnterior = document.querySelector('.actual')
  if (tabAnterior) {
    tabAnterior.classList.remove('actual');
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add('actual');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();
    });
  })
}

-> Creando Un Paginador 

let paso = 1;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador es la parte inferior de la pagina
  Lo llamamos al principio para que cargue los datos
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) {
    seccionAnterior.classList.remove('mostrar');
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');

  const tabAnterior = document.querySelector('.actual')
  if (tabAnterior) {
    tabAnterior.classList.remove('actual');
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add('actual');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
      Aqui lo mostramos para que muestre los cambios segun la pagina
    });
  })
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector('#anterior');
  const paginaSiguiente = document.querySelector('#siguiente');

  if (paso === 1) {
    paginaSiguiente.classList.remove('ocultar');
    paginaAnterior.classList.add('ocultar');
    Para que se muestre el boton de siguiente y se oculte el boton de anterior pero debemos de modificar el archivo de "_Paginacion.scss y agregar un hiden en seccion y se leccionarlo con javascript";
  } else if (paso === 3) {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.add('ocultar');

    Oculta el siguiente y muestra el anterior
  } else {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.remove('ocultar');
     Muestra siguiente y anterior en informacion cita
  }
}

-> Finalizando el Paginador

let paso = 1;
const pasoIncial = 1; -> Paginas creadas 
const pasoFinal = 3; Paginas finales

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente(); -> agg 
  paginaAnterior(); -> agg
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) {
    seccionAnterior.classList.remove('mostrar');
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');

  const tabAnterior = document.querySelector('.actual')
  if (tabAnterior) {
    tabAnterior.classList.remove('actual');
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add('actual');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  })
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector('#anterior');
  const paginaSiguiente = document.querySelector('#siguiente');

  if (paso === 1) {
    paginaSiguiente.classList.remove('ocultar');
    paginaAnterior.classList.add('ocultar');
  } else if (paso === 3) {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.add('ocultar');
  } else {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.remove('ocultar');
  }
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector('#anterior');
  paginaAnterior.addEventListener('click', function () {

    if (paso <= pasoIncial) return;
    paso--;
    console.log(paso);
  })
Esto se hace para observar si la pagina no resta mas de lo que deberia ya que solo contamos con 3 inputs de igual forma debemos de agregarlo en paginaSiguiente

}


function paginaAnterior() {
  const paginaAnterior = document.querySelector('#anterior');
  paginaAnterior.addEventListener('click', function () {

    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador(); para que efectue el cambio de pagina y coloque en cada una de las paginas del input
  })
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector('#anterior');
  const paginaSiguiente = document.querySelector('#siguiente');

  if (paso === 1) {
    paginaSiguiente.classList.remove('ocultar');
    paginaAnterior.classList.add('ocultar');
  } else if (paso === 3) {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.add('ocultar');
  } else {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.remove('ocultar');
  }
  mostarSeccion(); Para mostrarlo en pantalla al momento de hacer click pero en el anterior ahora debemos de irnos a siguiente
}

Ahora nos enfocamos en el paginaSiguiente() 

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector('#siguiente');
  paginaSiguiente.addEventListener('click', function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  })
}

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;

document.addEventListener('DOMContentLoaded', function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
}

function mostarSeccion() {

  const seccionAnterior = document.querySelector('.mostrar');
  if (seccionAnterior) {
    seccionAnterior.classList.remove('mostrar');
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add('mostrar');

  const tabAnterior = document.querySelector('.actual')
  if (tabAnterior) {
    tabAnterior.classList.remove('actual');
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add('actual');
}

function tabs() {
  const botones = document.querySelectorAll('.tabs button');
  botones.forEach(boton => {
    boton.addEventListener('click', function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  })
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector('#anterior');
  const paginaSiguiente = document.querySelector('#siguiente');

  if (paso === 1) {
    paginaSiguiente.classList.remove('ocultar');
    paginaAnterior.classList.add('ocultar');
  } else if (paso === 3) {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.add('ocultar');
  } else {
    paginaAnterior.classList.remove('ocultar');
    paginaSiguiente.classList.remove('ocultar');
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector('#anterior');
  paginaAnterior.addEventListener('click', function () {

    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  })
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector('#siguiente');
  paginaSiguiente.addEventListener('click', function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  })
}

¿Que es una Api?ontrollersAPIController;
Es una capa de abstraccion que nos permite conectarnos al servicio 
Usualmente una Api soporta los 4 verbos del CRUD
Usualmente tiene una forma muy organizada de poner a disposicion los datos.

•Rest API cuenta con endpoint(URLs) para hacer operaciones CRUD
• Lista todos los clientes GET / clientes
• Obtener un solo cliente GET /clientes/10
• Crear un nuevo cliente
• Editar un contacto PUT/clientes/3 
• Borrar un contacto DELETE /clientes/8

Usualmente una API es creada en JSON 
Ya crearemos una api para poder observarla.

-> Creando el Modelo de Servicios y exportando a JSON
Creamos dos archivos 
1. ApiController.php -> En la carpeta de Controllers.
2. Servicio.php -> En la carpeta models ya que interactuan con el servidor.

En el index.php que esta ubicado en public/ vamos a crear esta linea de comando
//Api citas
$router->get('/api/servicios', [ApiController::class, 'index']);

<?php

namespace MVC\public;

require_once __DIR__ . '/../includes/app.php';

use Controllers\ApiController;
use Controllers\CitaController;
use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

//Crear Cuenta 
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

//Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']);

//mensaje
$router->get('/mensaje', [LoginController::class, 'mensaje']);


//AREA PRIVADA 
$router->get('/cita', [CitaController::class, 'index']);

//Api citas -> Aqui agregado esta.
$router->get('/api/servicios', [ApiController::class, 'index']);

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ahora nos ubicamos en el archivo de ApiController.php 

<?php

namespace Controllers;

use Model\Servicio;

class ApiController
{
  public static function index()
  {
    echo "Desde api/servicios"
  }
}

Luego de esto vamos a modificar el archivo de Servicio.php Para obtener los datos de la base de datos, hay que tener cuidado en que tabla se accede ya que si falta una letra hay que revisar linea por linea de codigo.

<?php

namespace Model;

class Servicio extends ActiveRecord
{
  //base de datos 
  protected static $tabla = 'servicios';
  protected static $columnasDB = ['id', 'nombre', 'precio'];

  public $id;
  public $nombre;
  public $precio;

  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null; -> Si no coincide el id, que sea nulo = 0
    $this->nombre = $args['nombre'] ?? ''; -> Busca cada nombre uno por uno y muestralo en pantalla.
    $this->precio = $args['precio'] ?? ''; -> Busca cada precio uno por uno y muestralo en pantalla.
  
  }
}

Para observar los datos de la base de datos en php utilizamos dos codigos:

debuguear($servicios);

json_encode();

Uno es para observar los valores de la base de datos que es el debuguear.
Y el json_encode() Para observarlo en formato JSON
<?php

namespace Controllers;

use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
        debuguear($servicios);
  }
}

<?php

namespace Controllers;

use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }
}

->  Consultar la API con Fetch API y Async Await

Try catch -> Se utiliza para partes criticas. 
async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);

    console.log(resultado);
  } catch (error) {
    console.log(error);
  }
}

Observar datos en pantalla desde la base de Datos:

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    console.log(servicios);
  } catch (error) {
    console.log(error);
  }
}

fetch y ajax son lo mismo?

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    console.log(servicios);
  } catch (error) {
    console.log(error);
  }
}

-> Mostrando los Servicios de nuestra API
Creamos la siguiente funcion para hacer el codigo un poco mas legible
function mostrarServicios(servicios) {
  console.log(servicios);
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios); -> Ahora mostrarServicios(servicio); hara que muestre cada uno de los datos que se coloquen en la parte inferior de la funcion de mostrarServicios.
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => { -> iteracion de cada uno de los servicio, si es un array.
    const { id, nombre, precio } = servicio;

    console.log(precio); -> Aqui es que mostrara los resultados.
  });
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P"); -> Creamos este elemento
    nombreServicio.classList.add("nombre-serviicio"); Agregamos en la clase de P "nombre-servicio"
    nombreServicio.textContent = nombre; -> Muestra el nombre y servicio en los parrafos.

    console.log(nombreServicio);
  });
}

Agregamos el precio en la misma seccion:

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    console.log(precioServicio);
  });
}

Falta agregar el Div que contenga cada una de las nuevas clases que se van creando pasando el curso.

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;

    console.log(servicioDiv);
  });
}

Ahora insertamos cada uno de los div en el html de php con el id="serivicios" lo mostramos en pantalla:

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;

    servicioDiv.appendChild(nombreServicio); -> muestra en pantalla nombreServicio
    servicioDiv.appendChild(precioServicio); -> muestra en pantalla precioServicio

    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

-> CSS a los Servicios
Para agregarlo creamos el archivo de _servicios.scss en la carpeta de layout, luego lo agregamos al index.scss para que lo compile con el siguiente codigo

"index.scss"
@forward 'UI';
@forward 'cita';
@forward 'servicios';

"_servicios.scss"

@use 'base/variables' as v;
@use 'base/mixins' as m;

.listado-servicios {
  display: grid;
  gap: 3rem;

  @include m.tablet {
    @include m.grid(2, 2rem)
  }

  .servicio {
    background-color: v.$blanco;
    border-radius: 1rem;
    transition-property: transform;
    transition-duration: 300ms;
    text-align: center;

    &:hover {
      transform: scale(1.1);
    }

    p {
      color: v.$negro;
      margin: 0 0 calc(v.$separacion / 4) 0;

    }

    .precio-servicio {
      color: v.$azul;
      font-weight: v.$bold;
      font-size: 3rem;
      cursor: pinter;
    }
  }
}

-> Seleccionando Servicios para la Cita
Nos dirigimos al archivo de app.js y vamos a agregar: 

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = { -> Esta se utiliza para acceder a datos
  nombre '',
  fecha '',
  hora '',
  servicios: []
}

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = seleccionarServicio; -> Esta es para crearla y hacer poder hacer click

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio() { -> Este es para observar los cambios al momento de hacer click
  console.log('desde seleccionarServicio');
}

¿Como pasar una funcion por medio de un script? 
Por medio de una funcion llamada callback

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = seleccionarServicio(servicio); -> Observamos que agrega todos los datos a la vista en la consola del navegador

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  console.log(servicio); -> Para mostrar los datos en la consola del navegador.
}

Ahora para usar el callback, debemos de declarar a la funcion 
servicioDiv.onclick = function () {
   seleccionarServicio(servicio);
};

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = seleccionarServicio(servicio); -> Observamos que agrega todos los datos a la vista en la consola del navegador

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

Para que asi al momento de hacer click, se muestre en la consola, ahora falta agregarlo al servicio[] para observar los servicios en cada servicio seleccionado.

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { servicios } = cita;

  cita.servicios = [...servicios, servicio]; -> que es un express

  console.log(cita);
}

-> Cambiar la apariencia de un Servicio Seleccionado
En el _servicios.scss

@use 'base/variables' as v;
@use 'base/mixins' as m;

.listado-servicios {
  display: grid;
  gap: 3rem;

  @include m.tablet {
    @include m.grid(2, 2rem)
  }

  .servicio {
    background-color: v.$blanco;
    border-radius: 1rem;
    transition-property: transform;
    transition-duration: 300ms;
    text-align: center;

    &.seleccionado{ -> Hara efecto cuando se seleccione el servicio
      background-color: v.$azul;

      p{
        color: v.$blanco;
      }
    }

    &:hover {
      transform: scale(1.1);
    }

    p {
      color: v.$negro;
      margin: 0 0 calc(v.$separacion / 4) 0;

    }

    .precio-servicio {
      color: v.$azul;
      font-weight: v.$bold;
      font-size: 3rem;
    }
  }
}

Ahora nos ubicamos en app.js 

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  cita.servicios = [...servicios, servicio];

  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);
  divServicio.classList.add("seleccionado");
  console.log(servicio);
}

Ok ya cuando seleccionamos se marca de color azul y de color blanco el texto.

-> Agregar / Quitar Servicios
Comprobamos si el servicio fue agregado, o fue removido:

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;

  if (servicios.some(agregado => agregado.id === id)) {
    console.log("Ya esta agregado");
  } else {
    console.log("No esta agregado");
  }

  cita.servicios = [...servicios, servicio];

  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);
  divServicio.classList.add("seleccionado");
  console.log(servicio);
}

Si ya esta agregado, eliminarlo, si no esta agregado, agregarlo:

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) { -> condicional filter. 

    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
  } else { -> Va a funcionar como agregar cada servicio.
    console.log("No esta agregado");
  }

  cita.servicios = [...servicios, servicio];

  divServicio.classList.add("seleccionado");
  console.log(servicio);
}
-> Quedaria algo asi en la function
function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio]; 
    divServicio.classList.add("seleccionado");
  }

  console.log(servicio);
}

-> Almacenar nombre del cliente
creamos una nueva funcion 
nombreCliente():


function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  console.log(cita);
}

Para acceder a ello podemos hacer lo siguiente:

function nombreCliente() {
  cita.nombre = document.querySelector('#nombre').value;
}

-> Almacenar hora de la cita: 
Creamos una function nueva
seleccionaFecha();

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() { -> accedemos a ella
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function () {
    console.log("Seleccionaste una fecha");
  });
}

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function () {
    cita.fecha = inputFecha.value;
  });
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    console.log(e.target.value);
    cita.fecha = inputFecha.value;
  });
}

Si no trabajamos los sabados o domingo, es decir el fin de semana...

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    console.log(dia);
  });
}

Ahora condicionamos: 

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      console.log("Sabados y Domingo no abrimos");
    } else {
      console.log("correcto");
    }
  });
}
Ahora condicionamos para que no agregue valores sin mostrar advertencia por los momentos:


function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      console.log("Sabados y Domingo no abrimos");
    } else {
      cita.fecha = e.target.value;
    }
  });
}

-> Mostrar mensajes de error en fechas

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      mostrarAlerta("Fines de semana no laborables", "error"); -> Agregamos el mensaje, y el tipo, donde se encuentra la funcion, para asi mostrarla en pantalla
    } else {
      cita.fecha = e.target.value;
    }
  });
}

creamos una nueva funcion para no escalar tanto el documento para asi poder utilizarla un pcoco mas, pero es dentro del if(), para que sea una condicional.

function mostrarAlerta(mensaje, tipo) {
  const alerta = document.createElement("DIV");
}

Observamos lo que agregamos: 

function mostrarAlerta(mensaje, tipo) {
  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  console.log(alert);
}

Para poder observarla en pantalla:

function mostrarAlerta(mensaje, tipo) {
  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const formulario = document.querySelector(".formulario"); -> agregamos el appendChild()
  formulario.appendChild(alerta); -> y el mensaje de alerta
}

Y para quitarlo utilizamos el setTimeOut()

function mostrarAlerta(mensaje, tipo) {
  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const formulario = document.querySelector(".formulario");
  formulario.appendChild(alerta);

  setTimeout(() => {
    alerta.remove();
  }, 3000);
}

Ahora para evitar que se creen multiples alertas 
  const alertaPrevia = document.querySelector(".alerta");
  if (alertaPrevia) return;

Ahora quedaria asi :
function mostrarAlerta(mensaje, tipo) {
  const alertaPrevia = document.querySelector(".alerta");
  if (alertaPrevia) return;

  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const formulario = document.querySelector(".formulario");
  formulario.appendChild(alerta);

  setTimeout(() => {
    alerta.remove();
  }, 3000);
}
Para que se utiliza getUTCDay?

-> Evitar reservar una fecha anterior
  min="<?php echo date('Y-m-d') ?>"

  Esta linea de codigo es la que vamos a utilizar para evitar que el usuario indique un mes o año anterior al que estamos presentando el curso.
strtotime

"<?php echo date('Y-m-d', strtotime('+1 day')) ?>"
Asi termina para que el dia no se vea pero si el dia siguiente que vaya sumuando de uno en uno.

-> Validar la Hora de la Cita

Creamos una nueva variable en app.js
seleccionarHora();

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();
  seleccionaHora();

  consultarApi(); //Consultar api del backen en php
}

Lo mas comun seria despues de la function de seleccionaFecha()

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);
  })

}

Que es split en JavaScript


function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":");
    console.log(hora);

  })

}

Para estipular las horas validas o no utilizamos el siguiente metodo:

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];-> Condiocional y observar hora exacta. 

    if (hora < 10 || hora > 18) {
      console.log('Horas no validas');
    } else {
      console.log('Hora valida');
    }
  })
}

Para agregar la cita y la hora utilizamos el siguiente codigo:

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];

    if (hora < 10 || hora > 18) {
      console.log('Horas no validas');
    } else {
      cita.hora = e.target.value;

      console.log(cita);
    }
  })
}

Mostrar alerta en la parte inferior del programa:

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];

    if (hora < 10 || hora > 18) {
      mostrarAlerta('Hora no valida', 'error');
    } else {
      cita.hora = e.target.value;
      console.log(cita);
    }
  })
}

-> Mostrando el Resumen de la Cita
Creamos una funcion llamada mostrarResumen();

function mostrarResumen(){

  }

En el index.php modificamos el paso-3 para así poder utilizarlo en el JavaScript


function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');
  console.log(cita);
}

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');
  console.log(Object.values(cita));
}

Ok ahora agregamos los datos a app.js:

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();
  seleccionaHora();

  mostraResumen();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();

      if (paso === 3) {
        mostraResumen();
      }
    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");

    mostraResumen(); -> Debido a que estamos en el paso n°3 
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      mostrarAlerta("Fines de semana no laborables", "error");
    } else {
      cita.fecha = e.target.value;
    }
  });
}

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];

    if (hora < 10 || hora > 18) {
      e.target.value = '';
      mostrarAlerta('Hora no valida', 'error');
    } else {
      cita.hora = e.target.value;
      console.log(cita);
    }
  })
}

function mostrarAlerta(mensaje, tipo) {
  const alertaPrevia = document.querySelector(".alerta");
  if (alertaPrevia) return;

  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const formulario = document.querySelector(".formulario");
  formulario.appendChild(alerta);

  setTimeout(() => {
    alerta.remove();
  }, 3000);
}

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  if (Object.values(cita).includes('')) {
    console.log('Hacen falta datoss');
  } else {
    console.log('Todo bien')
  }
}

Y para finalizar el dia de hoy:


function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  console.log(cita.servicios.length); -> Observar valores faltantes.

  if (Object.values(cita).includes('')) {
    console.log('Hacen falta datos');
  } else {
    console.log('Todo bien')
  }
}

-> Mostrar Alerta si faltan datos en el Resumen
 
Para observar si hacen falta datos o servicios utilizamos el siguiente codigo con una condicional 

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  if (Object.values(cita).includes('') || cita.servicios.length === 0) {-> Esta es la parte que se vera con un cambio para mostrar si falta datos o servicios
    console.log('Hacen falta datos o Servicios');
  } else {
    console.log('Todo bien')
  }
}
Tambien podemos añadirle un tercer parametro en la funcion de mostrarAlerta()


let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();
  seleccionaHora();

  mostraResumen();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();

    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");

    mostraResumen();
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      mostrarAlerta("Fines de semana no laborables", "error", '.formulario');
    } else {
      cita.fecha = e.target.value;
    }
  });
}

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];

    if (hora < 10 || hora > 18) {
      e.target.value = '';
      mostrarAlerta('Hora no valida', 'error', '.formulario');
    } else {
      cita.hora = e.target.value;
      console.log(cita);
    }
  })
}

function mostrarAlerta(mensaje, tipo, elemento, desaparece = true) { -> "elemento, y desaparece se agregan como condicionales para la funcion, y asi poder hacer el codigo un poco mas flexible al momento de realizar una notificacion."

  const alertaPrevia = document.querySelector(".alerta");
  if (alertaPrevia) { -> Colocamos esta condicional para que la alerta en resumen se muestre al igual que en la de servicios.
    alertaPrevia.remove();

  }

  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const referencia = document.querySelector(elemento); -> Aqui antes estaba el formulario, lo cambiamos para hacer referencia debido a que no es solo el formulario.

  referencia.appendChild(alerta);

  if (desaparece) { -> Si cumple con la variable declarada en la "function", desaparece en el tiempo estipulado.
    setTimeout(() => {
      alerta.remove();
    }, 3000);
  }

}

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
  } else {
    console.log('Todo bien')
  }
}

-> Mostrar datos del resumen
Aun tenemos la alerta activa, pero debemos de solventarlo podemos usar un while() en javascript

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
  } else {
    console.log('Todo bien')
  }
}
Ahora eliminamos el else de la funcion para asi hacer elimine lo innecesario en las restricciones:


function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) { -> Para remover los datos seleccionado
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    // return; -> Siempre que este el ruturn comentado podra observarse si no hay que descomentarlo para asi observar algun fallo.

  }
  console.log('Todo bien');
}


function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    return;

  }

  const { nombre, fecha, hora, servicios } = cita;
  Observar datos en la consola.
  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;
  Y hacemos lo mismo para la fecha.

  console.log(nombreCliente);
}

Aqui mostramos los servicios en pantalla 
function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    return;

  }

  const { nombre, fecha, hora, servicios } = cita;
  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;

  const fechaCita = document.createElement('P');
  fechaCita.innerHTML = `<span>Fecha:</span> ${fecha}`;

  horaCita = document.createElement('P');
  horaCita.innerHTML = `<span>Hora:</span> ${hora}`;

  resumen.appendChild(nombreCliente);
  resumen.appendChild(fechaCita);
  resumen.append(horaCita);


  console.log(nombreCliente);
}


function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    return;

  }

  const { nombre, fecha, hora, servicios } = cita;
  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;

  const fechaCita = document.createElement('P');
  fechaCita.innerHTML = `<span>Fecha:</span> ${fecha}`;

  horaCita = document.createElement('P');
  horaCita.innerHTML = `<span>Hora:</span> ${hora}`;

  Para mostrar el nombre y la hora del servicio en consola

  servicios.forEach(servicio => {
    const { id, precio, nombre } = servicio;
    const contenedorServicio = document.createElement('Div');
    contenedorServicio.classList.add('contenedor-servicio');

    const textoServicio = document.createElement('P');
    textoServicio.textContent = nombre;

    const precioServicio = document.createElement('P');
    precioServicio.innerHTML = `<span>Precio:</span> ${precio}`;

    contenedorServicio.appendChild(textoServicio);
    contenedorServicio.appendChild(precioServicio);

    resumen.appendChild(contenedorServicio);
  
  Para mostrar hora servicio nombre en pantalla creado con un div y un texto.

})

  resumen.appendChild(nombreCliente);
  resumen.appendChild(fechaCita);
  resumen.append(horaCita);


  console.log(nombreCliente);
}

-> Aplicando css al resumen
Ok vamos a crear un archvio .scss en la carpeta layout/_resumen.scss 
Obviamente debemos de agregarlo al index.scss


@use 'base/variables' as v;

.contenido-resumen {
  p {
    margin-bottom: 1rem;
  }

  span {
    color: v.$azul;
    font-weight: v.$bold;
    font-size: 2.4rem;
  }
}

.contenedor-servicio {
  padding: 3rem 0;
  border-bottom: 1px solid v.$gris;

  &:last-of-type {
    margin-bottom: v.$separacion;
  }
}

Esa es como se vera en el resumen, ahora como va el codigo:

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    return;

  }

  const { nombre, fecha, hora, servicios } = cita;

  const headingServicios = document.createElement('H3'); -> Esta es para mostrar el heading de citaServicio
  headingServicios.textContent = 'Resumen de Servicios';
  resumen.appendChild(headingServicios);

  servicios.forEach(servicio => { -> Esta es para buscar los servicios.
    const { id, precio, nombre } = servicio;
    const contenedorServicio = document.createElement('Div');
    contenedorServicio.classList.add('contenedor-servicio');

    const textoServicio = document.createElement('P');
    textoServicio.textContent = nombre;

    const precioServicio = document.createElement('P');
    precioServicio.innerHTML = `<span>Precio:</span> ${precio}`;

    contenedorServicio.appendChild(textoServicio);
    contenedorServicio.appendChild(precioServicio);

    resumen.appendChild(contenedorServicio);

  })

  const headingCita = document.createElement('H3');
  headingCita.textContent = 'Resumen de Cita';
  resumen.appendChild(headingCita); -> Esta es para ver el resumen de cita en el resumen de HTML

Se coloco en la parte inferior para que vaya acorde a lo mostrado en cada una de las lineas de codigo mostradas en el sistema recien creado.

  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;

  const fechaCita = document.createElement('P');
  fechaCita.innerHTML = `<span>Fecha:</span> ${fecha}`;

  const horaCita = document.createElement('P');
  horaCita.innerHTML = `<span>Hora:</span> ${hora}`;
  resumen.appendChild(nombreCliente);
  resumen.appendChild(fechaCita);
  resumen.append(horaCita);


  console.log(nombreCliente);
}

-> Mostrar la fecha en un formato más amigable
  //formatear fecha: 
  const fechaObj = new Date(fecha);
  const mes = fechaObj.getMonth();
  const dia = fechaObj.getDate() + 2; -> Para que la fecha coincida con el dia.
  const year = fechaObj.getFullYear();

  const fechaUTC = new Date(Date.UTC(year, mes, dia));

  console.log(fechaUTC);

Para hacer los cambios corresonsales para observar una mejor fecha, o una mas amigable para el usuario:



  const { nombre, fecha, hora, servicios } = cita;

  const headingServicios = document.createElement('H3');
  headingServicios.textContent = 'Resumen de Servicios';
  resumen.appendChild(headingServicios);

  servicios.forEach(servicio => {
    const { id, precio, nombre } = servicio;
    const contenedorServicio = document.createElement('Div');
    contenedorServicio.classList.add('contenedor-servicio');

    const textoServicio = document.createElement('P');
    textoServicio.textContent = nombre;

    const precioServicio = document.createElement('P');
    precioServicio.innerHTML = `<span>Precio:</span> ${precio}`;

    contenedorServicio.appendChild(textoServicio);
    contenedorServicio.appendChild(precioServicio);

    resumen.appendChild(contenedorServicio);

  })

  const headingCita = document.createElement('H3');
  headingCita.textContent = 'Resumen de Cita';
  resumen.appendChild(headingCita);

  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;

  //formatear fecha: 
  const fechaObj = new Date(fecha);
  const mes = fechaObj.getMonth();
  const dia = fechaObj.getDate(); -> Para que la fecha coincida con el dia
  const year = fechaObj.getFullYear();

  const opciones = { weekday: 'long', year: 'numeric', month: 'long', month: 'long', day: 'numeric' }
  const fechaUTC = new Date(Date.UTC(year, mes, dia)); -> Vamos a crear un api con javascript

  const fechaFormateada = fechaUTC.toLocaleDateString('es-MX', opciones);
  console.log(fechaFormateada);


  const fechaCita = document.createElement('P');
  fechaCita.innerHTML = `<span>Fecha:</span> ${fechaFormateada}`; -> Para observar la fecha mas comoda para el usuario.
  Esto se conoce como inmutabilidad: Cuando cambias los valores de la variable, pero no modifica el objeto en el codigo.

  const horaCita = document.createElement('P');
  horaCita.innerHTML = `<span>Hora:</span> ${hora}`;
  resumen.appendChild(nombreCliente);
  resumen.appendChild(fechaCita);
  resumen.append(horaCita);


  console.log(nombreCliente);
}

-> Añadir un Botón para Reservar Citas

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

document.addEventListener("DOMContentLoaded", function () {
  inicarApp();
});

function inicarApp() {
  mostarSeccion();
  tabs();
  botonesPaginador(); //Agrega o quita los botnes del paginador
  paginaSiguiente();
  paginaAnterior();
  nombreCliente();
  seleccionaFecha();
  seleccionaHora();

  mostraResumen();

  consultarApi(); //Consultar api del backen en php
}

function mostarSeccion() {
  const seccionAnterior = document.querySelector(".mostrar");
  if (seccionAnterior) {
    seccionAnterior.classList.remove("mostrar");
  }
  const pasoSelector = `#paso-${paso}`;
  const seccion = document.querySelector(pasoSelector);
  seccion.classList.add("mostrar");

  const tabAnterior = document.querySelector(".actual");
  if (tabAnterior) {
    tabAnterior.classList.remove("actual");
  }

  const tab = document.querySelector(`[data-paso="${paso}"`);
  tab.classList.add("actual");
}

function tabs() {
  const botones = document.querySelectorAll(".tabs button");
  botones.forEach((boton) => {
    boton.addEventListener("click", function (e) {
      paso = parseInt(e.target.dataset.paso);
      mostarSeccion();

      botonesPaginador();

    });
  });
}

function botonesPaginador() {
  const paginaAnterior = document.querySelector("#anterior");
  const paginaSiguiente = document.querySelector("#siguiente");

  if (paso === 1) {
    paginaSiguiente.classList.remove("ocultar");
    paginaAnterior.classList.add("ocultar");
  } else if (paso === 3) {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.add("ocultar");

    mostraResumen();
  } else {
    paginaAnterior.classList.remove("ocultar");
    paginaSiguiente.classList.remove("ocultar");
  }
  mostarSeccion();
}

function paginaAnterior() {
  const paginaAnterior = document.querySelector("#anterior");
  paginaAnterior.addEventListener("click", function () {
    if (paso <= pasoIncial) return;
    paso--;
    botonesPaginador();
  });
}

function paginaSiguiente() {
  const paginaSiguiente = document.querySelector("#siguiente");
  paginaSiguiente.addEventListener("click", function () {
    if (paso >= pasoFinal) return;
    paso++;
    botonesPaginador();
  });
}

async function consultarApi() {
  try {
    const url = "http://localhost:3000/api/servicios";
    const resultado = await fetch(url);
    const servicios = await resultado.json();

    mostrarServicios(servicios);
  } catch (error) {
    console.log(error);
  }
}

function mostrarServicios(servicios) {
  servicios.forEach((servicio) => {
    const { id, nombre, precio } = servicio;

    const nombreServicio = document.createElement("P");
    nombreServicio.classList.add("nombre-servicio");
    nombreServicio.textContent = nombre;

    const precioServicio = document.createElement("P");
    precioServicio.classList.add("precio-servicio");
    precioServicio.textContent = `$${precio} `;

    const servicioDiv = document.createElement("DIV");
    servicioDiv.classList.add("servicio");
    servicioDiv.dataset.idServicio = id;
    servicioDiv.onclick = function () {
      seleccionarServicio(servicio);
    };

    servicioDiv.appendChild(nombreServicio);
    servicioDiv.appendChild(precioServicio);
    document.querySelector("#servicios").appendChild(servicioDiv);
  });
}

function seleccionarServicio(servicio) {
  const { id } = servicio;
  const { servicios } = cita;
  const divServicio = document.querySelector(`[data-id-servicio="${id}"] `);

  if (servicios.some((agregado) => agregado.id === id)) {
    cita.servicios = servicios.filter((agregado) => agregado.id !== id);
    divServicio.classList.remove("seleccionado");
  } else {
    cita.servicios = [...servicios, servicio];
    divServicio.classList.add("seleccionado");
  }

  console.log(cita);
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      mostrarAlerta("Fines de semana no laborables", "error", '.formulario');
    } else {
      cita.fecha = e.target.value;
    }
  });
}

function seleccionaHora() {
  const inputHora = document.querySelector("#hora");
  inputHora.addEventListener('input', function (e) {
    console.log(e.target.value);

    const horaCicta = e.target.value;
    const hora = horaCicta.split(":")[0];

    if (hora < 10 || hora > 18) {
      e.target.value = '';
      mostrarAlerta('Hora no valida', 'error', '.formulario');
    } else {
      cita.hora = e.target.value;
      console.log(cita);
    }
  })
}

function mostrarAlerta(mensaje, tipo, elemento, desaparece = true) {
  const alertaPrevia = document.querySelector(".alerta");
  if (alertaPrevia) {
    alertaPrevia.remove();

  }

  const alerta = document.createElement("DIV");
  alerta.textContent = mensaje;
  alerta.classList.add("alerta");
  alerta.classList.add(tipo);

  const referencia = document.querySelector(elemento);
  referencia.appendChild(alerta);

  if (desaparece) {
    setTimeout(() => {
      alerta.remove();
    }, 3000);
  }

}

function mostraResumen() {
  const resumen = document.querySelector('.contenido-resumen');

  while (resumen.firstChild) {
    resumen.removeChild(resumen.firstChild)
  }
  if (Object.values(cita).includes('') || cita.servicios.length === 0) {
    mostrarAlerta('Faltan datos de servicios, Fecha u Hora', 'error', '.contenido-resumen', false);
    return;

  }

  const { nombre, fecha, hora, servicios } = cita;

  const headingServicios = document.createElement('H3');
  headingServicios.textContent = 'Resumen de Servicios';
  resumen.appendChild(headingServicios);

  servicios.forEach(servicio => {
    const { id, precio, nombre } = servicio;
    const contenedorServicio = document.createElement('Div');
    contenedorServicio.classList.add('contenedor-servicio');

    const textoServicio = document.createElement('P');
    textoServicio.textContent = nombre;

    const precioServicio = document.createElement('P');
    precioServicio.innerHTML = `<span>Precio:</span> ${precio}`;

    contenedorServicio.appendChild(textoServicio);
    contenedorServicio.appendChild(precioServicio);

    resumen.appendChild(contenedorServicio);

  })

  const headingCita = document.createElement('H3');
  headingCita.textContent = 'Resumen de Cita';
  resumen.appendChild(headingCita);

  const nombreCliente = document.createElement('P');
  nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;

  //formatear fecha: 
  const fechaObj = new Date(fecha);
  const mes = fechaObj.getMonth();
  const dia = fechaObj.getDate() + 2;  -> Para que el dia coincida con la fecha.
  const year = fechaObj.getFullYear();

  const opciones = { weekday: 'long', year: 'numeric', month: 'long', month: 'long', day: 'numeric' }
  const fechaUTC = new Date(Date.UTC(year, mes, dia));
  const fechaFormateada = fechaUTC.toLocaleDateString('es-MX', opciones);
  console.log(fechaFormateada);


  const fechaCita = document.createElement('P');
  fechaCita.innerHTML = `<span>Fecha:</span> ${fechaFormateada}`;

  const horaCita = document.createElement('P');
  horaCita.innerHTML = `<span>Hora:</span> ${hora}`;

  //agregamos un boton creamos un boton modifcamos un boton

  const botonReservar = document.createElement('BUTTON');
  botonReservar.classList.add('boton');
  botonReservar.textContent = 'Resevar Cita';
  botonReservar.onclick = reservaCita;

  resumen.appendChild(nombreCliente);
  resumen.appendChild(fechaCita);
  resumen.appendChild(horaCita);
  resumen.appendChild(botonReservar);
}

function reservaCita() { -> Llamamos la funcion para crear un boton.
  console.log('reservando cita');
}

-> ¿Que es AJAX y como se utiliza?

Como hacer un ajax si toca mantenerlo. 
Si el codigo es nuevo, utiliza fetch

-> Nueva generacion de AJAX
formData()

function reservaCita() {
  const datos = new FormData(); -> Observar datos. 
  datos.append('nombre', 'juan'); -> Modificar datos  
  console.log(datos); ->como observarlos datos?
  console.log([...datos]); -> Esta es la forma en la que se utiliza el console.log pero cuando se trata de datos tipó formData().

}

-> Enviar peticiones al Servidor 

Debemos de crear un api, para '/api/citas' asi validarlo desde el servidor con 'POSTMAN' es la api que utilizaremos para hacer las pruebas necesarias en el curso, por lo que utiliza el profesor del curso 
public/index.php 
<?php

namespace MVC\public;

require_once __DIR__ . '/../includes/app.php';

use Controllers\ApiController;
use Controllers\CitaController;
use Controllers\LoginController;
use MVC\Router;

$router = new Router();

//Iniciar Sesion 
$router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

//Recuperar Password 
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

//Crear Cuenta 
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

//Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']);

//mensaje
$router->get('/mensaje', [LoginController::class, 'mensaje']);


//AREA PRIVADA 
$router->get('/cita', [CitaController::class, 'index']);

//Api citas
$router->get('/api/servicios', [ApiController::class, 'index']);
$router->post('/api/citas', [ApiController::class, 'guardar']); -> Esta es la API de prueba con postman 

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

Ya en el archivo de ApiController.php 
<?php

namespace Controllers;

use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }

  public static function guardar() -> Agregamos esta function para asi crear el API(poner a prueba)
  {
    $respuesta = [
      'mensaje' => 'Todo OK'
    ];

    echo json_encode($respuesta);
  }
}

-> Enviar Petición al Servidor con Fetch API y Async Await
Ahora vamos a utilizar fetch:
Utilizamos asyn await para saber el tiempo ya que desconocemos el tiempo de respuesta.

Probamos si conecta con el servidor...
Efectivamente si conecta con el servidor.
Dice statusText:"Ok"
status:200


async function reservaCita() {

  const datos = new FormData();
  datos.append("nombre", "admin");
  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: "POST",
  });
  // const resultado = await respuesta.json();
  console.log(respuesta);
}

async function reservaCita()  -> Creamos el asyn desde el principio antes de la funcion{
  const datos = new FormData();
  datos.append("nombre", "admin");
  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: "POST",
  });
  const resultado = await respuesta.json();
  console.log(resultado);
}

¿Como enviamos datos con un metodo post, y como obtenerlo en la base de datos en JavaScript?

-> Enviar los datos del Formulario con FormData
Debemos de darle a entender al fetch donde estan los datos, asi podemos ver los datos que esta enviando el formulario a la base de datos, ya que contamos solo con informacion, mas no datos.

async function reservaCita() {
  const datos = new FormData();
  datos.append("nombre", "admin");
  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: 'POST',
    body: datos -> Es donde va a buscar los datos obtenidos.
  });
  const resultado = await respuesta.json();
  console.log(resultado);
}

Ok nos colocamos en el archvio de ApiController.php 

<?php

namespace Controllers;

use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }

  public static function guardar()
  {
    $respuesta = [
      'datos' => $_POST -> Esta accediendo desde esta variable los datos mostrados en el servidor, ya que cada uno de los que se agreguen, sera enviado a este, y luego se enviaran a JS.

    ];

    echo json_encode($respuesta);
  }
}

-> Añadir los Servicios a la petición Fetch
Para observar los datos enviados por medio de javascript y extraer los valores:

async function reservaCita() {
  const { nombre, fecha, hora } = cita;
  const datos = new FormData();
  datos.append("nombre", nombre);
  datos.append("fecha", fecha);
  datos.append("hora", hora);

  console.log([...datos]);

  return; -> Evita enviar los datos al servidor, estamos haciendo pruebas.

Ya luego eliminamos el console.log()
}

Ahora vamos a extraer el id para hacer la relacion en la base de datos: 


async function reservaCita() {
  const { nombre, fecha, hora, servicios } = cita;
  const idServicios = servicios.map(servicio => servicio.id);
  console.log(idServicios);

  return;
}

Ahora para observar los datos enviados al servidor finalizamos con esta:
async function reservaCita() {
  const { nombre, fecha, hora, servicios } = cita;
  const idServicios = servicios.map(servicio => servicio.id);
  // console.log(idServicios);


  const datos = new FormData();
  datos.append("nombre", nombre);
  datos.append("fecha", fecha);
  datos.append("hora", hora);
  datos.append('servicios', idServicios);


  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: "POST",
    body: datos,
  });
  const resultado = await respuesta.json();
  console.log(resultado);
}

-> Almacenando las Citas en Postman
Creamos un nuevo archivo llamado "citas.php" en la carpeta de modelos.

En Cita.php 

<?php

namespace Model;

class Cita extends ActiveRecord
{
  //base de datos:
  //
  protected static $tabla = 'citas';
  protected static $columnasDb = ['id', 'fecha', 'hora', 'usuarioId'];

  public $id;
  public $fecha;
  public $hora;
  public $usuarioId;

  public  function  __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->fecha = $args['fecha'] ?? '';
    $this->hora = $args['hora'] ?? '';
    $this->usuarioId = $args['usuarioId'] ?? '';
  }
}

-> Guardando la Cita con Fetch
Ahora debemos de mostrarlo dentro del codigo no solo por fuera.

Debemos de agregar el id al archivo app.js, para asi agregarla al inicio, luego de alli a que lea la informacion la base de datos.

let paso = 1;
const pasoIncial = 1;
const pasoFinal = 3;
const cita = {
  id: "", -> Observamos el id que inicia la sesion
  nombre: "",
  fecha: "",
  hora: "",
  servicios: [],
};

Sin mencionar que debemos de agregarlo en el archivo de CitaController, para asi poder mostrarlo atraves de un input invisible... 

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div id="app">
  <nav class="tabs">
    <button type="button" data-paso="1">Servicios</button>
    <button type="button" data-paso="2">Informacion Cita</button>
    <button type="button" data-paso="3">Resumen</button>
  </nav>
  <div id="paso-1" class="seccion">
    <h2>Servicios</h2>
    <p class="text-center">Elige tus servicios a continuacion</p>
    <div id="servicios" class="listado-servicios"></div>
  </div>

  <div id="paso-2" class="seccion">
    <h2>Tus Datos Y Cita</h2>
    <p class="text-center">Coloca tus datos y fecha</p>
    <div id="servicios" class="listado-servicios">

      <form class="formulario">
        <div class="campo">
          <label for="nombre">Nombre</label>
          <input id="nombre" type="text" placeholder="Tu Nombre" name="nombre" value="<?php echo $nombre; ?>"
            disabled />
        </div>

        <div class="campo">
          <label for="fecha">Fecha </label>
          <input
            id="fecha"
            type="date"
            min="<?php echo date('Y-m-d', strtotime('+1 day')) ?>" />
        </div>

        <div class="campo">
          <label for="hora">Hora</label>
          <input id="hora" type="time" />
        </div>
        <input type="hidden" id="id" value="<?php echo $id; ?>"> -> Aqui
      </form>
    </div>
  </div>

Al igual en el archivo Cita.php Agregamos el 'id' para asi imprimirlo en el codigo de citaController 

<?php

namespace Controllers;

use MVC\Router;

class CitaController
{
  public static function index(Router $router)
  {
    session_start();

    $router->render('cita/index', [
      'nombre' => $_SESSION['nombre'],
      'id' => $_SESSION['id']
    ]);
  }
}

En el archivo de app.js debemos de agregar la siguiente function()


function idCliente() {
  cita.id = document.querySelector("#id").value;
}

Nos ubicamos en function nombreCliente()

function idCliente() { -> La colocamos antes para seguir con la estructura del codigo.
  cita.id = document.querySelector("#id").value;
}

function nombreCliente() {
  cita.nombre = document.querySelector("#nombre").value;
}

function seleccionaFecha() {
  const inputFecha = document.querySelector("#fecha");
  inputFecha.addEventListener("input", function (e) {
    const dia = new Date(e.target.value).getUTCDay();

    if ([6, 0].includes(dia)) {
      e.target.value = "";
      mostrarAlerta("Fines de semana no laborables", "error", ".formulario");
    } else {
      cita.fecha = e.target.value;
    }
  });
}

El detalle de la conexion a la base de datos era el llamar a la funcion id en el destructuring del asyn await:

async function reservaCita() {
  const { nombre, fecha, hora, servicios, id } = cita;
  const idServicios = servicios.map((servicio) => servicio.id);
  // console.log(idServicios);

  const datos = new FormData();
  datos.append("usuarioId", id);
  datos.append("fecha", fecha);
  1;
  datos.append("hora", hora);
  datos.append("servicios", idServicios);

  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: "POST",
    body: datos,
  });

  const resultado = await respuesta.json();
  console.log(resultado);
}

-> Mostrando una alerta 
Debemos de agregar una alerta para que el usuario no marque mil veces una cita en un minuto:

Solo agregamos dos cosas un script y el diseño que preferamos. 

async function reservaCita() {
  const { nombre, fecha, hora, servicios, id } = cita;
  const idServicios = servicios.map((servicio) => servicio.id);
  // console.log(idServicios);

  const datos = new FormData();
  datos.append("usuarioId", id);
  datos.append("fecha", fecha);
  1;
  datos.append("hora", hora);
  datos.append("servicios", idServicios);

  // console.log([...datos]); -> Observar datos de FormData()
  //peticion hacia la api
  const url = "http://localhost:3000/api/citas";

  const respuesta = await fetch(url, {
    method: "POST",
    body: datos,
  });

  const resultado = await respuesta.json();
  console.log(resultado.resultado); -> Si nos confirma true en la consola, podemos proceder a agregar el siguiente codigo:

  if (resultado.resultado) {
    Swal.fire({
      icon: "success",
      title: "Cita Creada",
      text: "Tu cita fue creada correctamente",
      button: 'Ok'
    });
  }
}

Falta recargar la pagina 

  if (resultado.resultado) {
    Swal.fire({
      icon: "success",
      title: "Cita Creada",
      text: "Tu cita fue creada correctamente",
      button: 'Ok'
    }).then(() => { -> Agregamos esta linea de comando para que la pagina se recargue aunque no lo habiamos visto pero es bueno informarse.
      window.location.reload();
    })
  }
}

En dado caso se caiga el servidor podemos utilizar un TryCatch

try {

    const url = "http://localhost:3000/api/citas";

    const respuesta = await fetch(url, {
      method: "POST",
      body: datos,
    });

    const resultado = await respuesta.json();
    console.log(resultado.resultado);

    if (resultado.resultado) {
      Swal.fire({
        icon: "success",
        title: "Cita Creada",
        text: "Tu cita fue creada correctamente",
        button: 'Ok'
      }).then(() => {
        setTimeout(() => {
          window.location.reload();

        }, 3000);
      })
    }

  } catch (error) {
    Swal.fire({
      icon: "error",
      title: "Error",
      text: "Hubo un error al guardar la informacion",
    });
  }
}

-> ¿Como Debuguear los llamados Fetch ?
Nos ubicamos en "ActiveRecord.php" para asi modificar y ver los valores en la base de datos:

 // crea un nuevo registro
  public function crear()
  {
    // Sanitizar los datos
    $atributos = $this->sanitizarAtributos();

    // Insertar en la base de datos
    $query = " INSERT INTO " . static::$tabla . " ( ";
    $query .= join(', ', array_keys($atributos));
    $query .= " ) VALUES (' ";
    $query .= join("', '", array_values($atributos));
    $query .= " ') ";

    return json_encode(['query' => $query]); -> Para observar la modificacion en la tabla si existe un valor no relacinado en la tabla .

    // Resultado de la consulta
    $resultado = self::$db->query($query);
    return [
      'resultado' => $resultado,
      'id' => self::$db->insert_id
    ];
  }

Lo mostramos en la aplicacion de POSTMAN y debe de decir:

"{\"query\":\" INSERT INTO citas ( fecha, hora, usuarioId ) VALUES (' 2022\\\/11\\\/24', '10:35:00', '19 ') \"}"


-> Guardando los Servicios de la Cita
Creamos un archivo en la carpeta de modelos llamado CitasServicios.php

Y colocamos los siguientes codigos:

<?php

namespace Model;

class CitaServicio extends ActiveRecord
{
  protected static $tabla = 'citasServicios';
  protected static $columnasDB = ['id', 'citaId', 'servicioId'];

  public $id;
  public $citaId;
  public $servicioId;

  public function  __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->citaId = $args['citaI'] ?? '';
    $this->servicioId = $args['servicioId'] ?? '';
  }
}

Ahora nos ubicamos en el archivo de ApiController

<?php

namespace Controllers;

use Model\Cita;
use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }

  public static function guardar()
  {
    //Almacena la cita y devuelve el ID
    /* $cita = new Cita($_POST); */
    /* $resultado = $cita->guardar(); */

    //Almacena la cita y el servicio 

    $resultado = [
      'servicios' => $_POST['servicios'] -> Para observar los datos obtenidos en el programa.
    ];

    echo json_encode($resultado);
  }
}

Ahora agregamos el idServicios para asi hacer un poco mas dinamico el programa.

<?php

namespace Controllers;

use Model\Cita;
use Model\Servicio;

class ApiController
{
  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }

  public static function guardar()
  {
    //Almacena la cita y devuelve el ID
    /* $cita = new Cita($_POST); */
    /* $resultado = $cita->guardar(); */

    //Almacena la cita y el servicio 

    $idServicios = explode(",", $_POST['servicios']);

    $resultado = [
      'servicios' => $idServicios
    ];

    echo json_encode($resultado);
  }
}

Ya que es un arreglo podemos agregar un forEach():

  public static function index()
  {
    $servicios = Servicio::all();
    echo json_encode($servicios);
  }

  public static function guardar()
  {
    //Almacena la cita y devuelve el ID
    $cita = new Cita($_POST);
    $resultado = $cita->guardar();

    $id = $resultado['id'];


    //Almacena los servicios con el iD de la cita
    $idServicios = explode(",", $_POST['servicios']);
    foreach ($idServicios as $idServicio) { -> Busque de forma automatica los datos en la base de datos
      $args = [
        'citadId' => $id,
        'servicioId' => $idServicio
      ];
      $citaServicio = new CitaServicio($args);
      $citaServicio->guardar();
    }
    //retornamos una respuesta:
    $respuesta = [
      'resultado' => $idServicios
    ];

    echo json_encode($respuesta);-> Hacemos un pequeño cambio aqui.

    echo json_encode(['resultado' => $resultado]);
  }

Nos queda un error de seguridad, pero lo podemos solucionar ya que si entran en algun otro navegador puede pasar la seguridad si no estan autenticado.

-> Proteger la Ruta de Citas
Eso se corrige desde la carpeta de funciones :

function isAuth(): bool
{
    if (!isset($_SESSION['login'])) {
        header('Location: /');
        return false;
    }
}

Nos dirigimos al arhcio de CitaController.php 
Y agregamos isAuth();
<?php

namespace Controllers;

use MVC\Router;

class CitaController
{
  public static function index(Router $router)
  {
    session_start();
    isAuth();

    $router->render('cita/index', [
      'nombre' => $_SESSION['nombre'],
      'id' => $_SESSION['id']
    ]);
  }
}
Ahora ya protegimos las rutas de entrada.

->Mostrar el Nombre del Cliente
En todos las plataformas muestran nuestros nombres, tambien debemos de demostrarlo a nuestro clientes, o solicitarlo al que esta haciendo la estructura de desarollo.

Nos dirigimos al index.php que se encuentra en la carpeta cita.

Y debemos de agregar al principio de la vista el <?php echo $nombre ?? ''; ?>

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div class="barra"> -> Creamos el div y le agregamos en nombre a la clase de barrass.
  <?php echo $nombre ?? ''; ?>
</div>

-> Añadir un botón para Cerrar Sesión
·Debemos de agregar un a con un href y una clase boton
·Ir al scss a la clase de _UI.scss 
·Agregar unos estilos nuevos para diferenciarlo  de cada uno de los botones y no presionar por error.
·Agregar una separacion en ambos botones.
·Modificar el logout.

<h1 class="nombre-pagina">Crear Nueva Cita</h1>
<p class="descripcion-pagina">Elige Tus servicios a continuacion</p>

<div class="barra">
  <?php echo $nombre ?? ''; ?>

  <a class="boton" href="/logout">Cerrar Sesión</a>

</div>

@use "base/variables" as v;
@use "base/mixins" as m;

.contenedor-app {
  @include m.tablet {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    min-height: 100vh;
  }

  .imagen {
    height: 30rem;
    background-image: url(../img/1.jpg);
    background-size: cover;
    background-position: center center;

    @include m.tablet {
      height: auto;
    }
  }

  .app {
    width: 95%;
    margin: 0 auto;
    padding: 3rem 0;
    // Para no tocar las orillas
  }
}
.barra 
{ 
  margin: v.$separacion 0;

  @include m.tablet {
    display: flex;
    justify-content: space-between;
    align-items: center
  }


  .boton{
    @include m.boton(v.$negro, v.$blanco);
    margin: 0;
  }
}

Ok ahora que tenemos listo la gran mayoria de la presentancion presentamos la configuracion el estilo del logout.


  public static function logout(): void
  {
    session_start();

    debuguear($_SESSION); -> Lo colocamos antes para mostrar los datos del usuario, ya que la sesion ha sido iniciada.

    $_SESSION = []; -> Aqui indirectamente dice, que la sesion esta vacia.

    /*   debuguear($_SESSION); */
  }


  public static function logout(): void
  {
    session_start();

    debuguear($_SESSION);

    $_SESSION = [];

    /*   debuguear($_SESSION); */
  } -> Asi quedaria la estructura del codigo.

-> Creando la Vista del Panel de Administración
·Agregamos la ruta al archivo, lo configuramos en el index.php de la carpeta public.

//AREA PRIVADA 
$router->get('/cita', [CitaController::class, 'index']);
$router->get('/admin', [CitaController::class, 'index']);


·Creamos el archivo en la carpeta de controllers, "adminController.php"

<?php

namespace Controllers;

use MVC\Router;

class AdminController
{
  public static function index(Router $router)
  {
    $router->render('admin/index', [

    ]);
  }
}

Ahora debemos de crear una carpeta en views llamada index.php y de alli vamos a poder acceder nosotros a la vista del controlador.

Creamos la carpeta admin con un archivo llamado 
index.php 

Para evitar tanto copia y pega hacemos un archivo, llamado barra.php en la carpeta de tempaletes

<?php
include_once __DIR__ . '/../templates/barras.php';
?>

Esto es lo unico que necesitamos para poder efectuar y evitar tanto copia y pega.

Ahora el archivo en templates/barras.php:

<div class="barra">
  <p>Hola: <?php
  echo $nombre ?? ''; ?> </p>
  <a class="boton" href="/logout">Cerrar Sesión</a>
</div>

Ok ahora nos dirigmos al AdminController.php para mostrar el nombre del usuario administrador:

<?php

namespace Controllers;

use MVC\Router;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();
    $router->render('admin/index', [
      'nombre' => $_SESSION['nombre']
    ]);
  }
}

Y en el archivo index.php de la carpeta de admin: 

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date"
      id="fecha" 
      name="fecha" />

    </div>
  </form>
</div>

->Uniendo Tablas con un JOIN
Tipos de join y sus diferentes resultados.
left join 
right join 
inner join
full join 
w3school.com 

SELECT * FROM citas
LEFT OUTER JOIN usuarios
ON citas.usuarioId=usuarios.id
LEFT OUTER JOIN citasServicios
ON citasServicios.citaId=citas.id
LEFT OUTER JOIN servicios
ON servicios.id=citasServicios.servicioId

Que es sobrenormalizar una base de datos...

->Extrayendo la información Necesaria

·Vamos a consultar lo relativo e importante.
Concat(): Permite unir una o mas columnas.

SELECT citas.id, CONCAT(citas.fecha, ' ', citas.hora) FROM citas
LEFT OUTER JOIN usuarios 
ON citas.usuarioId=usuarios.id
LEFT OUTER JOIN citasServicios
ON citasServicios.citaId=citas.id
LEFT OUTER JOIN servicios


·Tambien podemos utilizar un alias.
SELECT citas.id, CONCAT(citas.fecha, ' ', citas.hora) as cita FROM citas
LEFT OUTER JOIN usuarios 
ON citas.usuarioId=usuarios.id
LEFT OUTER JOIN citasServicios
ON citasServicios.citaId=citas.id
LEFT OUTER JOIN servicios

Ok para resumir: 

SELECT citas.id, CONCAT(usuarios.nombre, ' ', usuarios.apellido) as Cliente, usuarios.email, usuarios.telefono, servicios.nombre, servicios.precio
FROM citas
LEFT OUTER JOIN usuarios 
ON citas.usuarioId=usuarios.id
LEFT OUTER JOIN citasServicios
ON citasServicios.citaId=citas.id
LEFT OUTER JOIN servicios 
ON servicios.id=citasServicios.servicioId

IA
SELECT 
    citas.id, 
    citas.hora, 
    CONCAT(usuarios.nombre, ' ', usuarios.apellido) AS cliente, 
    usuarios.email, 
    usuarios.telefono, 
    servicios.nombre AS servicio, 
    servicios.precio
FROM 
    citas
LEFT OUTER JOIN 
    usuarios ON citas.usuarioId = usuarios.id
LEFT OUTER JOIN 
    citasServicios ON citasServicios.citaId = citas.id
LEFT OUTER JOIN 
    servicios ON citasServicios.servicioId = servicios.id;

-> Creando el modelo para las citas en el administrador
Carpeta models crear una archivo nuevo llamado AdminCita.php

Instanciamos la base de datos dando un posible futuro a una tabla:

<?php

namespace Model;

class AdminCita extends ActiveRecord
{
  protected static $tabla = 'citasServicios'; -> tabla con mayor informacion.

  protected static $columnasDB = ['id', 'hora', 'cliente', 'email', 'telefono', 'servicio', 'precio'];
  ->Aproximado de columnasDB

  public $id;
  public $hora;
  public $cliente;
  public $email;
  public $telefono;
  public $servicio;
  public $precio;


  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->hora = $args['hora'] ?? '';
    $this->cliente = $args['cliente'] ?? '';
    $this->email = $args['email'] ?? '';
    $this->telefono = $args['telefono'] ?? '';
    $this->servicio = $args['servicio'] ?? '';
    $this->precio = $args['precio'] ?? '';
  }
}

->Consultar la Base de datos en PHP
Se encuentra ubicado en el ActiveRecord

  // Busca un registro por su id
  public static function where($columna, $valor)
  {
    $query = "SELECT * FROM " . static::$tabla . " WHERE {$columna} = '{$valor}'";
    $resultado = self::consultarSQL($query);
    return array_shift($resultado);
  }

  // Consulta Plana de SQL (Utilizar cuando los métodos del modelo no son suficientes)
  public static function SQL($query)
  {
    $resultado = self::consultarSQL($query);
    return $resultado;
  }



  // Consulta Plana de SQL (Utilizar cuando los métodos del modelo no son suficientes

 public static function SQL($query)
  {
    $resultado = self::consultarSQL($query);
    return $resultado;
  } -> Esta se encuentra ubicada en la base de datos para nosotros poder efectuar una busqueda en la base de datos, y asi poder ubicar las columnas y las filas. 

Ahora vamos a agregar la siguiente linea de comando en el archivo de AdminController.php 

class AdminController
{
  public static function index(Router $router)
  {

    session_start();
    Esta es la linea de codigo que se va a relacionar con la base de datos, y asi efectuar los resultados pero se observara como un array en el navegador, lo bueno es que obtenemos de una manera facil los resultado.

    $consulta = "SELECT citas.id, citas.hora, CONCAT( usuarios.nombre, ' ', usuarios.apellido) as cliente, ";
    $consulta .= " usuarios.email, usuarios.telefono, servicios.nombre as servicio, servicios.precio  ";
    $consulta .= " FROM citas  ";
    $consulta .= " LEFT OUTER JOIN usuarios ";
    $consulta .= " ON citas.usuarioId=usuarios.id  ";
    $consulta .= " LEFT OUTER JOIN citasServicios ";
    $consulta .= " ON citasServicios.citaId=citas.id ";
    $consulta .= " LEFT OUTER JOIN servicios ";
    $consulta .= " ON servicios.id=citasServicios.servicioId ";
    /* $consulta .= " WHERE fecha =  '${fecha}' "; */

    $citas = AdminCita::SQL($consulta);

    debuguear($citas);

    $router->render('admin/index', [
      'nombre' => $_SESSION['nombre'],
      'citas' =>$citas -> Hay que llamarla para mostrarla en la vista, y esa parte no la explico el profesor ... D=
    ]);

  }
}

-> Mostrar las Citas en Pantalla
Lo importante es de conocer el codigo, y observar lo que nos hace falta.

Nos ubicamos en el index.php pero estamos ubicado en la carpeta de views y admin.
<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" id="fecha" name="fecha" />
    </div>
  </form>
</div>
<div class="citas-admin"> -> Aqui nos ubicamos
  <ul class="citas">

Debemos de ponerle un condicional "if()" para que muestre en su defecto si el mismo ID coincide y no lo muestre otra vez, solo una, y que realice una busqueda automaitca en la base de datos.

<?php

    foreach ($citas as $cita) {
      if ($idCita !== $cita->id) {
        ?>
        <li> -> Esta es para observar los datos.
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>telefono: <span><?php echo $cita->telefono; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>

      }
    }

Hay que declarar a $idCita = 0; Para evitar que nos de un Undifined.

<div class="citas-admin">
  <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $cita) {
      if ($idCita !== $cita->id) {
        ?>
        <li>
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>telefono: <span><?php echo $cita->telefono; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>

          <h3>Servicio</h3>
          <?php
          $idCita = $cita->id;
      } //Fin del if cuando se itera. ?>
      </li>
    <?php } ?>
  </ul>
</div>

Debemos de declarar el servicio de cada uno, para asi dividirlo en cada seccion y hora.

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" id="fecha" name="fecha" />
    </div>
  </form>
</div>
<div class="citas-admin">
  <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $cita) {
      if ($idCita !== $cita->id) {
        ?>
        <li>
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>telefono: <span><?php echo $cita->telefono; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>

          <h3>Servicio</h3>
          <?php
          $idCita = $cita->id;
      } //Fin del if cuando se itera. ?>
        <p class="servicio"><?php echo $cita->servicio . " " . $cita->precio; ?></p>
      </li>
    <?php } ?>
  </ul>
</div>

-> CSS a las Citas
Vamos a crear multiples archvios al en la carpeta src/layaout creamos un archivo llamado "_admin.scss"

·Lo agregamos al index.scss para que compile.

@forward 'UI';
@forward 'cita';
@forward 'servicios';
@forward 'resumen';
@forward 'admin';

Ok ahora nos dirigimos al archivo y modificamos:

@use 'base/variables' as v;

.citas {
  list-style: none;
  padding: 0;

  li {
    padding: 1rem;
    border-top: 1px solid v.$blanco;

    p {
      font-weight: v.$bold;
      color: v.$azul;
    }

    span,
    .servicios {
      font-weight: v.$regular;
      color: v.$blanco;
    }
  }
}

tambien podemos eliminar el </li>, que se encuente en el views/admin/index.php que cierra para que html lo arregle de forma ordenada. 

-> Calcular el Total a pagar
Aqui debemos de corregir una cita, en la forma de hacerlo

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" id="fecha" name="fecha" />
    </div>
  </form>
</div>
<div class="citas-admin">
  <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $key => $cita) { // Usamos $key para saber cuál es el último elemento
      if ($idCita !== $cita->id) {
        ?>
        <li>
          <p>ID: <span>
            </span></p>
          <p>Hora: <span>
            </span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>
          <p>Teléfono: <span><?php echo $cita->telefono; ?></span></p>

          <h3>Servicio</h3>
          <?php
          $idCita = $cita->id;
      } //Fin del if
      ?>
        <p class="servicio"><?php echo $cita->servicio . " " . $cita->precio; ?>
        </p>

        <?php
        $actual = $cita->id;
        $proximo = $citas[$key + 1]->id ?? 0; // Obtenemos el ID del siguiente elemento
        if (esUltimo($actual, $proximo)) { ?>
        <?php }
    } // Fin de Foreach ?>
  </ul>
</div>
Asi es como debe de terminar el codigo.

Debemos de agregar en el archivo de funciones.php que esta ubicado en includes/funciones.php

La vamos a colocar luego de esta funcion 

function s($html): string
{
  $s = htmlspecialchars($html);
  return $s;
}

debemos de crear una funcion llamada esUltimo

function esUltimo(string $actual, string $proximo): bool
{
  if ($actual !== $proximo) {
    return true;
  }
  return false;
}

Ahora agregamos un echo en el index.php
·$total = 0; -> Para que inicie en 0

 <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $key => $cita) { // Usamos $key para saber cuál es el último elemento
      if ($idCita !== $cita->id) {
        $total = 0;
        ?>
        <li>
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>
          <p>Teléfono: <span><?php echo $cita->telefono; ?></span></p>

          <h3>Servicio</h3>
          <?php
          $idCita = $cita->id;
      } //Fin del if
      ?>
        <?php $total += $cita->precio; ?> -> Total sera una sumatoria.

        <p class="servicio"><?php echo $cita->servicio . " " . $cita->precio; ?>
        </p>

        <?php ->$actual y $proximo 
        $actual = $cita->id;
        $proximo = $citas[$key + 1]->id ?? 0; // Obtenemos el ID del siguiente elemento, ultimo elemento por que el foreach() lo elimina
        if (esUltimo($actual, $proximo)) { ?>
        Muestra el precio
          <p class="total">Total: <span>$ <?php echo $total; ?></span> </p>

      </li>
    <?php }
    } // Fin de Foreach 
    ?>

-> Mostrar las citas por fecha

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" 
      id="fecha" 
      name="fecha"
      value="<?php echo $fecha; ?>" /> -> Agregamos esta fecha para observar la fecha actual y si hay citas registradas.
    </div>
  </form>
</div>
<div class="citas-admin">
  <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $key => $cita) { // Usamos $key para saber cuál es el último elemento
      if ($idCita !== $cita->id) {
        $total = 0;
        ?>
        <li>
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>
          <p>Teléfono: <span><?php echo $cita->telefono; ?></span></p>

          <h3>Servicio</h3>
          <?php
          $idCita = $cita->id;
      } //Fin del if
      ?>
        <?php $total += $cita->precio; ?>
        <p class="servicio"><?php echo $cita->servicio . " " . $cita->precio; ?>
        </p>

        <?php
        $actual = $cita->id;
        $proximo = $citas[$key + 1]->id ?? 0; // Obtenemos el ID del siguiente elemento
        if (esUltimo($actual, $proximo)) { ?>

          <p class="total">Total: <span>$ <?php echo $total; ?></span> </p>

        </li>
      <?php }
    } // Fin de Foreach 
    ?>
  </ul>
</div>

-> Arreglando detalles visuales:
En el archvio UI.scss 

  .app {
    width: 95%;
    margin: 0 auto;
    padding: 3rem 0;

    // Para no tocar las orillas
    @include m.tablet { -> agregamos este estilo para que la foto no se vea en desface.
            overflow-x: hidden;
      /* Oculta el scroll horizontal */
      overflow-y: auto;
      /* Muestra el scroll vertical solo si es necesario */
    }

}

-> Añadir la función para filtrar por fechas
Mas comun es por JS.

document.addEventListener("DOMContentLoaded", function () {
  iniciarApp();
});

function iniciarApp() {
  buscarPorFecha();
}

function buscarPorFecha() {
  const fechaInput = document.querySelector("#fecha");
  fechaInput.addEventListener("input", function () {
    console.log("nueva fecha");
  });
}

Leer las fecha:
function buscarPorFecha() {
  const fechaInput = document.querySelector("#fecha");
  fechaInput.addEventListener("input", function (e) {
    const fechaSeleccionada = e.target.value;
    console.log(fechaSeleccionada);
  });
}

Ok ahora ya procedemos a redirigirla en la localizacion de la ventana:

function buscarPorFecha() {
  const fechaInput = document.querySelector("#fecha");
  fechaInput.addEventListener("input", function (e) {
    const fechaSeleccionada = e.target.value;

    window.location = `?fecha=${fechaSeleccionada}`;
  });
}

->Validar Fechas 
Para observar la fecha desde el navegador es mejor ir al AdminController y colocar un debuguear($_GET);

<?php

namespace Controllers;

use MVC\Router;
use Model\AdminCita;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    debuguear($_GET);

    $fecha = date('Y-m-d');
  }
}

Ahora separamos :

<?php

namespace Controllers;

use MVC\Router;
use Model\AdminCita;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    $fecha = $_GET['fecha'];
    $fecha = explode('-', $fecha);
    debuguear($fecha);
    $fecha = date('Y-m-d');
  } -> no importa que existan dos variables siempre y cuando su condicion sean diferentes y el debuguear evita el choque de codigos.
}

Para evitar los graciosos: 

debuguear(checkdate($fecha[1], $fecha[2], $fecha[0])); 
Aqui es donde va a chequear, por mes[1], dia[2] y año [0]
Tambien lo podemos observar en el array de lo que nos muestra el navegador en el codigo pasado.

Podemos hacer una sola variable con $fecha.
<?php

namespace Controllers;

use MVC\Router;
use Model\AdminCita;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    $fecha = $_GET['fecha'];
    $fecha = explode('-', $fecha);
    if (!checkdate($fecha[1], $fecha[2], $fecha[0])) {
      header('Location: /404');
    }


    $fecha = date('Y-m-d');
  }
}

De la siguiente forma: 

<?php

namespace Controllers;

use MVC\Router;
use Model\AdminCita;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    $fecha = $_GET['fecha'] ?? date('Y-m-d');
    $fecha = explode('-', $fecha);
    if (!checkdate($fecha[1], $fecha[2], $fecha[0])) {
      header('Location: /404');
    }
  }
}

<?php

namespace Controllers;

use MVC\Router;
use Model\AdminCita;

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    $fecha = $_GET['fecha'] ?? date('Y-m-d');
    $fechas = explode('-', $fecha);
    if (!checkdate($fechas[1], $fechas[2], $fechas[0])) {
      header('Location: /404');
    }
  }
}

Ahora vamos a mostrar un mensaje de que no hay citas para esa fecha:

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" id="fecha" name="fecha" value="<?php echo $fecha; ?>" />
    </div>
  </form>
</div>

<?php
if (count($citas) === 0) { -> Buscar funcion count()
  echo "<h2> No hay citas para esta fecha</h2>";
}
?>

->Eliminar Citas
Nos dirigimos al index.php que esta ubbicado en la carpeta de public/index.php 

Agregamos una api nueva a la estructura para eliminar.

//Api citas
$router->get('/api/servicios', [ApiController::class, 'index']);
$router->post('/api/citas', [ApiController::class, 'guardar']);
$router->post('/api/eliminar', [ApiController::class, 'eliminar']); -> La cual es esta.

En el index del admin/index.php colocamos el siguiente codigo para observar si existe o no citas ese dia:

<h1 class="nombre-pagina">Panel de Administracion</h1>
<?php
include_once __DIR__ . '/../templates/barras.php';
?>
<h2>Buscar Citas</h2>
<div class="busqueda">
  <form class="formulario">
    <div class="campo">
      <label for="fecha">Fecha</label>
      <input type="date" id="fecha" name="fecha" value="<?php echo $fecha; ?>" />
    </div>
  </form>
</div>

<?php
if (count($citas) === 0) {
  echo "<h2> No hay citas para esta fecha</h2>";
}

?>

Ahora agregamos el boton para eliminar:
En el el archivo de views/admin/index.php

<div class="citas-admin">
  <ul class="citas">
    <?php
    $idCita = 0;
    foreach ($citas as $key => $cita) { // Usamos $key para saber cuál es el último elemento
      if ($idCita !== $cita->id) {
        $total = 0;
    ?>
        <li>
          <p>ID: <span><?php echo $cita->id; ?></span></p>
          <p>Hora: <span><?php echo $cita->hora; ?></span></p>
          <p>Cliente: <span><?php echo $cita->cliente; ?></span></p>
          <p>Email: <span><?php echo $cita->email; ?></span></p>
          <p>Teléfono: <span><?php echo $cita->telefono; ?></span></p>

          <h3>Servicio</h3>
        <?php
        $idCita = $cita->id;
      } //Fin del if
        ?>
        <?php $total += $cita->precio; ?>
        <p><?php echo $cita->servicio . " " . $cita->precio; ?>
        </p>

        <?php
        $actual = $cita->id;
        $proximo = $citas[$key + 1]->id ?? 0; // Obtenemos el ID del siguiente elemento
        if (esUltimo($actual, $proximo)) { ?>

          <p>Total: <span class="total">$ <?php echo $total; ?></span> </p>

          <form action="/api/eliminar" method="POST">
            <input type="hidden" name="id" value="<?php echo $cita->id; ?>" />

            <input type="submit" class="boton-eliminar" value="Eliminar">
          </form>

Ahora:

Observando lo que se envia al servidor

  public static function eliminar()
  {
    debuguear($_POST);
  }
}

Observamos los datos eliminados
  public static function eliminar()
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $id = $_POST['id'];

      debuguear($id);
    }
  }
}

  public static function eliminar()
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $id = $_POST['id'];
      $cita = Cita::find($id);
      debuguear($cita);
    }
  }
}


  public static function eliminar()
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $id = $_POST['id'];
      $cita = Cita::find($id);
      $cita->eliminar(); -> Para eliminar la informacion en la base de datos.
    }
  }
}

Aunque para obtener mas informacion podemos utilizar la variable de ($_SERVER);

  public static function eliminar()
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      debuguera($_SERVER);
      $id = $_POST['id'];
      $cita = Cita::find($id);
      $cita->eliminar(); -> Para eliminar la informacion en la base de datos.
    }
  }
}

Para que elimine una cita:

  public static function eliminar()
  {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $id = $_POST['id'];
      $cita = Cita::find($id);
      $cita->eliminar();

      header('Location:' . $_SERVER['HTTP_REFERER']);
    }
  }
}

-> Proteger el Panel de administración
Abrimos el archivo de AdminController:

class AdminController
{
  public static function index(Router $router)
  {

    session_start();

    isAdmin(); -> Esta es la la linea de codigo que se va a colocar en el archivo de admincontroller.php 
Luego debemos de crear la funcion en el archivo de funciones
 }
}

Nos dirigimos al archivo y colocamos lo siguiente: 

function isAdmin(): void
{
  if (!isset($_SESSION['admin'])) {
    header('Location:/');
  }
}

Ya con esto podemos iniciar sesion de forma segura.

-> Crear un Menú para el Administrador
Nos ubicamos en views/templates/barras.php

<?php 
  if(isset($_SESSION['admin])){
    echo "si es admin";
  } else { 
    echo "no es admin";
  }
?>

Luego que observamos que no es o si es admin, procedemos con el codigo :

<?php 
  if(isset($_SESSION['admin])){
    <div class="barra-servicios">
    <a class="boton" href="/admin>Ver citas</a>
    <a class="boton" href="/servicios">Ver servicios</a>
    <a class="boton" href="/servicios/crear">Nuevo Servicio</a>
    </div>
?>
 <?php }?> 

Ahora nos dirigimos a realizar un cambio de estilos: 
En el archivo de _UI.scss

.barra-servicio {
  margin-bottom: v.$separacion;

  @include m.tablet {
    display: flex;
    justify-content: space-between;
  }

  .boton {
    margin: 0 0 1rem 0;
  }
}

->Routing para Servicios
Debemos de crear un nuevo controlador en la carpeta de controllers, y le llamaremos ServicioController.php
Debemos tambien agregar la ruta al rounting para asi redirigir al usuario.

$router->get('/servicios', [ServiciosController::class, 'index']);
$router->get('/servicios/crear', [ServiciosController::class, 'crear']);
$router->post('/servicios/crear', [ServiciosController::class, 'crear']);
$router->get('/servicios/actualizar', [ServiciosController::class, 'actualizar']);
$router->post('/servicios/actualizar', [ServiciosController::class, 'actualizar']);
$router->get('/servicios/eliminar', [ServiciosController::class, 'eliminar']);
Debemos tener en claro que el metodo para eliminar una propiedad es POST y no get. 
$router->post('/servicios/eliminar', [ServiciosController::class, 'eliminar']);

Ahora nos vamos al archivo de "ServciosController.php"

<?php

namespace Controllers;

use MVC\Router;

class ServiciosController
{
  public static function index()
  {
    echo "Desde servicio";
  }
}

Probamos en el navegador:
http://localhost:3000/servicios
Debe de mostrarnos el siguiente mensaje:

Desde servicio

Debemos tambien de crear una carpeta nueva, en la carpeta de views llamada "servicios" para asi mostrarla en el "ServiciosController"

<?php

namespace Controllers;

use MVC\Router;

class ServiciosController
{
  public static function index(Router $router)
  {
    $router->render('/servicios/index', [
-> Mostramos el renderizado de la pagina.
    ]);

  }

  public static function crear(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }

  public static function actualizar(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }

  public static function eliminar(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }
}

->Creando las Vistas para los Servicios
Creamos un archvio llamado "crear.php" en la misma carpeta de "servicios" que esta ubicada en views 
Uno de formulario.
Uno de actualizar

Nos ubicamos en el archivo de ServiciosController 
<?php

namespace Controllers;

use MVC\Router;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();
    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre'] -> Para mostrar el nombre en la vista.
    ]);

  }

  public static function crear(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }

  public static function actualizar(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }

  public static function eliminar(Router $router)
  {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }
  }
}

Ahora copiamos y pegamos el codigo para mostrarlo en cada una de las vistas.

Importante, declara en cada una la session

<?php

namespace Controllers;

use MVC\Router;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre']
    ]);

  }

  public static function crear(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre']
    ]);
  }

  public static function actualizar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre']
    ]);
  }

  public static function eliminar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

  }
}

Ir a layaout a solucionar el problema con el css, utilizamos "/" para que busque en todos los archivos y solvente

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>App Salón</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/build/css/app.css">
</head>

->Creando el Formulario para Servicios

Nos ubicamos en el archivo de crear.php 

<h1 class="nombre-pagina">Nuevo Servicio</h1>
<p class="descripcion-pagina">Llena todos los campos para añadir nuevos servicios</p>

<?php
include_once __DIR__ . '/../templates/barras.php';
?>

<form action="/servicios/crear" method="POST" class="formulario"> ->tipo formulario

  <?php
  include_once __DIR__ . '/formulario.php'; -> Directorio de formulario
  ?>

  <input type="submit" class="boton" value="Guardar servicios"> -> Envio de datos
</form>

Ahora ya nos ubicamos en el formulario.php :

<div class="campo">
  <label for="nombre">Nombre</label>
  <input type="text" id="nombre" placeholder="Nombre Servicio" name="nombre">
</div>

<div class="campo">
  <label for="precio">Precio</label>
  <input type="number" id="precio" placeholder="Precio Servicio" name="precio">
</div>

Aun no procede a hacer algo el codigo, pero ya procederemos a hacer que funcione y lo envie mediante un post al servidor.

<div class="campo">
  <label for="nombre">Nombre</label>
  <input type="text" id="nombre" placeholder="Nombre Servicio" name="nombre" value="<?php echo $servicio->nombre; ?>">
</div>

<div class="campo">
  <label for="precio">Precio</label>
  <input type="number" id="precio" placeholder="Precio Servicio" name="precio" value="<?php echo $servicio->precio; ?>">
</div>

-> Validación a los Servicios

Mostrar alertas:

<h1 class="nombre-pagina">Nuevo Servicio</h1>
<p class="descripcion-pagina">Llena todos los campos para añadir nuevos servicios</p>

<?php
/* include_once __DIR__ . '/../templates/barras.php'; */
include_once __DIR__ . '/../templates/alertas.php';
?>

<form action="/servicios/crear" method="POST" class="formulario">

  <?php
  include_once __DIR__ . '/formulario.php';
  ?>

  <input type="submit" class="boton" value="Guardar servicios">
</form>

Debemos de crear un $servicio = new Servicio; para que nos devuelva un array vacio y asi poder evitar el Undifined.

<?php

namespace Controllers;

use MVC\Router;
use Model\Servicio;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre']
    ]);

  }

  public static function crear(Router $router)
  {
    session_start();
    $servicio = new Servicio;

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  
    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
    ]);
  }

  public static function actualizar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre']
    ]);
  }

  public static function eliminar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

  }
}

Ahora sincronizamos el "$_POST"

<?php

namespace Controllers;

use MVC\Router;
use Model\Servicio;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre']
    ]);

  }

  public static function crear(Router $router)
  {
    session_start();
    $servicio = new Servicio;

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $servicio->sincronizar($_POST); -> en crear
    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
    ]);
  }

  public static function actualizar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre']
    ]);
  }

  public static function eliminar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

  }
}

Agregamos las alertas en el codigo 

<?php

namespace Controllers;

use MVC\Router;
use Model\Servicio;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre']
    ]);

  }

  public static function crear(Router $router)
  {
    session_start(); -> Aqui agregamos una 
    $servicio = new Servicio;
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $servicio->sincronizar($_POST);
    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas -> Las mostramos en la vista del navegador.
    ]);
  }

  public static function actualizar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre']
    ]);
  }

  public static function eliminar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    }

  }
}
Ahora nos dirigimos al archivo de Servicio.php
Funciones de php:

<?php

namespace Model;

class Servicio extends ActiveRecord
{
  //base de datos 
  protected static $tabla = 'servicios';
  protected static $columnasDB = ['id', 'nombre', 'precio'];

  public $id;
  public $nombre;
  public $precio;

  public function __construct($args = [])
  {
    $this->id = $args['id'] ?? null;
    $this->nombre = $args['nombre'] ?? '';
    $this->precio = $args['precio'] ?? '';
  }

  public function validar() -> Creamos la funcion de validar 
  {
    if (!$this->nombre) { -> Obligamos que se coloque los datos 
      self::$alertas['error'][] = 'El nombre del servicio es obligatorio';
    }

    if (!is_numeric($this->precio)) { 
      self::$alertas['error'][] = 'El precio no es valido';
    }
  } ->  Ahora agregamos un return  
  return self::$alertas;
}

Ahora veremos si un arreglo esta vacio o no. 
Y guardarlo en la base de datos. 
Y redireccion a /servicios.

  public static function crear(Router $router)
  {
    session_start();
    $servicio = new Servicio;
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $servicio->sincronizar($_POST);

      $alertas = $servicio->validar();

      if (empty($alertas)) { -> Esta vacio o no?
        $servicio->guardar(); -> Guardamos en la base ded datos 
        header('Location: /servicios'); -> redirigimos
      }
    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }


->Mostrar los Servicios

Primeramente debemos de mostrar los servicios en el ServiciosController.php

<?php

namespace Controllers;

use MVC\Router;
use Model\Servicio;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    $servicios = Servicio::all();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre'],
      'servicios' => $servicios
    ]);

  }
}

Luego modificamos el archivo de index.php 

<h1 class="nombre-pagina">Servicios</h1>
<p class="descripcion-pagina">Administracion de servicios</p>

<?php
include_once __DIR__ . '/../templates/barras.php';
?>

<ul class="servicios">

  <?php foreach ($servicios as $servicio) { ?>

    <li>
      <p>Nombre :<span><?php echo $servicio->nombre; ?></span></p>
      <p>Precio $<span><?php echo $servicio->precio; ?></span></p>
    </li>

    <?php
  }
  ?>

</ul>

Luego ir a admin.scss 


    span,
    .servicios {
      font-weight: v.$regular;
      color: v.$blanco;
    }
  }
}

.servicios { -> Colocamos extend
  @extend .citas;
}

-> CSS a los Servicios:

Nos ubicamos en el index.php y efectuammos foreach ya que estamos accediendo a informacion de tipo array();

<ul class="servicios">

  <?php foreach ($servicios as $servicio) { ?>

    <li>
      <p>Nombre :<span><?php echo $servicio->nombre; ?></span></p>
      <p>Precio $<span><?php echo $servicio->precio; ?></span></p>

      <div class="acciones">
        <a  class="boton" href="/servicios/actualizar?id<?php echo $servicio->id; ?>">Actualizar</a>
      </div>
      <form action="/servicios/eliminar" method="POST">
        <input type="hidden" name="id" value="<?php echo $servicio->id; ?>">

        <input type="submit" value="Borrar" class="boton-eliminar">
        </form> 
    </li>

    <?php
  }
  ?>
</ul>

Ya hecho esto, se puede relacionar el _admin.scss 

.servicios {
  @extend .citas; -> Para hacer parecido al que se encuentra en citas.scss

  .acciones {
    margin: 0;
  }

  .boton,
  .boton-eliminar{
    margin: 0 0 1rem 0;
    border-radius: 1rem;

  }
}

-> Creando el Formulario de Actualizar Servicios
Ahora vamos a realizar el formualrio de actualizar.php 

<h1 class="nombre-pagina">Actualizar Servicios</h1>
<p class="descripcion-pagina">Modificar los valores del formulario</p>

<?php
include_once __DIR__ . '/../templates/barras.php';
include_once __DIR__ . '/../templates/alertas.php';
?>


<form method="POST" class="formulario"> ->Anteriormente un action pero genera error en el codigo ya que solo soporta una accion al metodo post

  <?php
  include_once __DIR__ . '/formulario.php';
  ?>

  <input type="submit" class="boton" value="Guardar servicios">
</form>


Eliminamos el action para evitar errores:

<h1 class="nombre-pagina">Actualizar Servicios</h1>
<p class="descripcion-pagina">Modificar los valores del formulario</p>

<?php
include_once __DIR__ . '/../templates/barras.php';
include_once __DIR__ . '/../templates/alertas.php';
?>

<form action="/servicios/crear" method="POST" class="formulario">
<form method="POST" class="formulario"> -> Aqui exisitia un action

  <?php
  include_once __DIR__ . '/formulario.php';
  ?>


  <input type="submit" class="boton" value="Guardar servicios">
</form>

Ahora para traer los datos de la base de datos y modificarlo en la ventana utilizamos lo siguiente:

 public static function actualizar(Router $router)
  {
    session_start();
    if (!is_numeric($_GET['id'])); // Valida que el ID sea un número

    $servicio = Servicio::find($_GET['id']); -> Busca en la base de datos  
    $alertas = [];

    if (!$servicio) {
      header('Location: /servicios'); // Si el servicio no existe, redirige
    }

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }

-> Actualizar el Servicio
Nos ubicamos en la parte de actulizar en el archvio de ServiciosController.php

Para que se sincronice con la base de datos:


 public static function actualizar(Router $router)
  {
    session_start();
    if (!is_numeric($_GET['id'])) return; // Valida que el ID sea un número

    $servicio = Servicio::find($_GET['id']);
    $alertas = [];

    if (!$servicio) {
      header('Location: /servicios'); // Si el servicio no existe, redirige
    }

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $servicio->sincronizar($_POST);

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }

Debemos hacer una notiificacion para que el usuario entienda que el nombre es importante.


 public static function actualizar(Router $router)
  {
    session_start();
    if (!is_numeric($_GET['id'])) return; // Valida que el ID sea un número

    $servicio = Servicio::find($_GET['id']);
    $alertas = [];

    if (!$servicio) {
      header('Location: /servicios'); // Si el servicio no existe, redirige
    }

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $servicio->sincronizar($_POST);

    $alertas = $servicio->validar(); -> Agregamos alertas

    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }


Si las alertas estan vacias, colocamos un empty() para saber si lo estan o no.  

 public static function actualizar(Router $router)
  {
    session_start();
    if (!is_numeric($_GET['id'])) return; // Valida que el ID sea un número

    $servicio = Servicio::find($_GET['id']);
    $alertas = [];

    if (!$servicio) {
      header('Location: /servicios'); // Si el servicio no existe, redirige
    }

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $servicio->sincronizar($_POST);

    $alertas = $servicio->validar();

    if(empty($alertas)){
      $servicio->guardar();
      header('Location:/servicios');
    }
    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }

->Eliminar un Servicio:
Observar si estamos llamando el controlador:

  public static function eliminar(Router $router)
  {
    session_start();
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      debuguear($_POST);
    }
  }

Observar si eliminamos el que nosotros hemos destinado:

  public static function eliminar()
  {

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $id = $_POST['id'];
      $servicio = Servicio::find($id);

      debuguear($servicio);
    }
  }

Ya que tenemos acceso a todos los metodos, ahora si podemos eliminar.


if ($_SERVER['REQUEST_METHOD'] == 'POST') {
$id = $_POST['id'];
 $servicio = Servicio::find($id);
 $servicio->eliminar();
 header('location:/servicios');
}

-> Proteger Rutas: 
Agregamos el controlador creado por nosotros el cual es isAdmin(); para que si no es un administrador que lo retorne al location 


<?php

namespace Controllers;

use MVC\Router;
use Model\Servicio;

class ServiciosController
{
  public static function index(Router $router)
  {
    session_start();

    isAdmin();

    $servicios = Servicio::all();

    $router->render('/servicios/index', [
      'nombre' => $_SESSION['nombre'],
      'servicios' => $servicios
    ]);
  }

  public static function crear(Router $router)
  {
    session_start();
        isAdmin();
    $servicio = new Servicio;
    $alertas = [];

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $servicio->sincronizar($_POST);

      $alertas = $servicio->validar();

      if (empty($alertas)) {
        $servicio->guardar();
        header('Location: /servicios');
      }
    }

    $router->render('/servicios/crear', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }

  public static function actualizar(Router $router)
  {
    session_start();

      isAdmin();

    if (!is_numeric($_GET['id'])) return; // Valida que el ID sea un número

    $servicio = Servicio::find($_GET['id']);
    $alertas = [];

    if (!$servicio) {
      header('Location: /servicios'); // Si el servicio no existe, redirige
    }

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $servicio->sincronizar($_POST);

    $alertas = $servicio->validar();

    if(empty($alertas)){
      $servicio->guardar();
      header('Location:/servicios');
    }
    }

    $router->render('/servicios/actualizar', [
      'nombre' => $_SESSION['nombre'],
      'servicio' => $servicio,
      'alertas' => $alertas
    ]);
  }

  public static function eliminar()
  {
        isAdmin();

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $id = $_POST['id'];
      $servicio = Servicio::find($id);
      $servicio->eliminar();
      header('location:/servicios');
    }
  }
}

-> Variables de entornos. 
